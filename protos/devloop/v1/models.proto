syntax = "proto3";
package devloop.v1;

option go_package = "github.com/panyam/devloop/gen/go/devloop/v1";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/api/http.proto";
import "google/protobuf/empty.proto";
import "mcp/v1/annotations.proto";


// ProjectInfo represents the information about a registered devloop project.
// This contains the core identification and location data for a project.
message ProjectInfo {
  // Unique identifier for the project. This can be:
  // - Manually set in devloop.yaml settings.project_id (recommended for AI tools)
  // - Auto-generated from the project directory path (fallback)
  // Examples: "my-backend", "frontend-app", "user-service"
  string project_id = 1;
  
  // Absolute path to the project's root directory containing .devloop.yaml
  // This is where all relative paths in commands and file operations are resolved from.
  // Example: "/Users/dev/projects/my-app"
  string project_root = 2;
}

message Config {
  string project_id = 1;
	Settings settings = 2;
	repeated Rule rules = 3;
}

// Settings defines global settings for devloop.
message Settings {
  string project_id = 1;

  // Whether to prefix logs with rule name or not
  bool prefix_logs = 2;

  // Length of the prefix to format in if prefixing logs.
	uint32 prefix_max_length = 3;

  // Default debounce delay for all rules if they do not have their own DB delay specified
	optional uint64 default_debounce_delay = 4;

  // Whether to log verbosely or not
  bool verbose = 5;

  bool color_logs = 6;

  string color_scheme = 7;

  map<string, string> custom_colors = 8;

  string default_watch_action = 9;

  // Cycle detection configuration
  CycleDetectionSettings cycle_detection = 10;

  // Whether to suppress colors from subprocess output (default: false)
  // When true, all subprocess output appears in plain text
  // When false, subprocess tools like npm, go test, etc. can output their native colors
  bool suppress_subprocess_colors = 11;

  // Maximum number of rules that can run in parallel (default: 0 = unlimited)
  // Set to 1 for sequential execution, useful for debugging rule chains
  uint32 max_parallel_rules = 12;
}

// Settings for cycle detection and prevention
message CycleDetectionSettings {
  // Whether to enable cycle detection (default: true)
  bool enabled = 1;
  
  // Whether to perform static validation at startup (default: true)
  bool static_validation = 2;
  
  // Whether to enable dynamic rate limiting (default: false for now)
  bool dynamic_protection = 3;
  
  // Maximum triggers per minute before rate limiting kicks in (default: 10)
  uint32 max_triggers_per_minute = 4;
  
  // Maximum chain depth for trigger relationships (default: 5)
  uint32 max_chain_depth = 5;
  
  // Time window for file modification frequency detection in seconds (default: 60)
  uint32 file_thrash_window_seconds = 6;
  
  // Number of modifications within window to consider "thrashing" (default: 5)
  uint32 file_thrash_threshold = 7;
}

// LogLine represents a single log entry from a rule execution.
// Used for streaming real-time logs and retrieving historical log data.
message LogLine {
  // The project that generated this log line
  string project_id = 1;
  
  // The specific rule that produced this output (e.g., "backend", "frontend", "tests")
  string rule_name = 2;
  
  // The actual log content/output line from the command
  // This includes all stdout/stderr from the rule's commands
  string line = 3;
  
  // When this log line was generated (Unix timestamp in milliseconds)
  // Use this for time-based filtering and chronological ordering
  int64 timestamp = 4;
}

message Rule {
  // The project this rule belongs to
  string project_id = 1;
  
  // The rule name (e.g., "backend", "frontend", "tests")
  // Must match a rule name from the project's .devloop.yaml configuration
  string name = 2;

  // The commands that will be executed for this rule
  repeated string commands = 3;

  // The rule matchers and the actions to take for them
  repeated RuleMatcher watch = 4;

  // What to do when a file does not match any pattern by default
  string default_action = 5;

  // Prefix for this rule
  string prefix = 6;

  // The workdir for this rule.  If not specified then will default to the directory where the devloop config is in.
  string work_dir = 7;

  // Whether to skip running on init (default false = will run on init)
  // Set to true to prevent rule from executing when devloop starts up
  // Example: skip_run_on_init: true
  bool skip_run_on_init = 8;

  // Whether the rule will have verbose logs or not
  optional bool verbose = 9;

  // Delay for debouncing if rules matched multiple times in rapid successession
  optional uint64 debounce_delay = 10;

  // Color to use to show the logs for this rule
  string color = 11;

  map<string, string> env = 12;

  // Per-rule cycle protection override (if not set, inherits from global settings)
  // Set to false to disable cycle protection for this specific rule
  optional bool cycle_protection = 13;

  // Status of this rule
  RuleStatus status = 14;

  // Whether to exit devloop when this rule fails startup (default: false)
  // Set to true to use legacy behavior where devloop exits on startup failure
  bool exit_on_failed_init = 15;

  // Maximum number of retry attempts for failed startup (default: 10)
  uint32 max_init_retries = 16;

  // Base backoff duration in milliseconds for startup retries (default: 3000ms)
  // Grows exponentially: 3s, 6s, 12s, 24s, etc.
  uint64 init_retry_backoff_base = 17;

  // Whether this rule represents a long-running operation (default: false)
  // Long-running operations (LRO) like dev servers run indefinitely and are managed differently:
  // - They don't consume worker semaphore slots (unlimited concurrency)
  // - When file changes trigger them, existing processes are killed and restarted
  // - They're marked as RUNNING immediately and never COMPLETED
  // - Examples: "./bin/server", "npm run dev", database containers
  // Set to true for processes that run indefinitely, false for build/test commands
  bool lro = 18;
}

message RuleMatcher {
  // Patterns to match this rule for
  repeated string patterns = 1;

  // Action to take when rule matches - currently "include" | "exclude"
  string action = 2;
}

// RuleStatus represents the current execution status and history of a rule.
// Use this to monitor build/test progress and check for failures.
message RuleStatus {
	string project_id = 1;
	string rule_name = 2;

  // Whether the rule is currently executing commands
  // true = commands are running, false = rule is idle
  bool is_running = 3;
  
  // When the current execution started (Unix timestamp in milliseconds)
  // Only meaningful when is_running = true
  google.protobuf.Timestamp start_time = 4;
  
  // When the last execution completed (Unix timestamp in milliseconds)
  // Use this to check how recently a rule was executed
  google.protobuf.Timestamp last_build_time = 5;
  
  // Result of the last execution. Possible values:
  // - "SUCCESS": All commands completed successfully (exit code 0)
  // - "FAILED": One or more commands failed (non-zero exit code)
  // - "RUNNING": Rule is currently executing
  // - "IDLE": Rule has not been executed yet
  string last_build_status = 6;
}
