syntax = "proto3";

package devloop_gateway.v1;

option go_package = "github.com/panyam/devloop/gen/go/protos/devloop/v1";

import "google/api/annotations.proto";
import "google/api/http.proto";
import "google/protobuf/empty.proto";

// ProjectInfo represents the information about a registered devloop project.
message ProjectInfo {
  string project_id = 1;
  string project_root = 2;
}

// LogLine represents a single log entry from a rule.
message LogLine {
  string project_id = 1;
  string rule_name = 2;
  string line = 3;
  int64 timestamp = 4; // Unix timestamp in milliseconds
}

// RuleStatus represents the current status of a rule.
message RuleStatus {
  string project_id = 1;
  string rule_name = 2;
  bool is_running = 3;
  int64 start_time = 4;       // Unix timestamp in milliseconds, if running
  int64 last_build_time = 5;  // Unix timestamp in milliseconds, if not running
  string last_build_status = 6; // e.g., "SUCCESS", "FAILED", "RUNNING", "IDLE"
}

// DevloopMessage is a wrapper for all messages exchanged between devloop and the gateway.
message DevloopMessage {
  string correlation_id = 1; // Used to correlate requests and responses
  oneof content {
    // Messages sent from devloop to gateway
    RegisterRequest register_request = 2;
    UnregisterRequest unregister_request = 3;
    LogLine log_line = 4;
    UpdateRuleStatusRequest update_rule_status_request = 5;
    GetConfigResponse get_config_response = 6;
    GetRuleStatusResponse get_rule_status_response = 7;
    TriggerRuleResponse trigger_rule_response = 8;
    ListWatchedPathsResponse list_watched_paths_response = 9;
    ReadFileContentResponse read_file_content_response = 10;

    // Messages sent from gateway to devloop
    TriggerRuleRequest trigger_rule_request = 11;
    GetConfigRequest get_config_request = 12;
    GetRuleStatusRequest get_rule_status_request = 13;
    ListWatchedPathsRequest list_watched_paths_request = 14;
    ReadFileContentRequest read_file_content_request = 15;
    GetHistoricalLogsRequest get_historical_logs_request = 16;
  }
}

// RegisterRequest is sent by devloop to register with the gateway.
message RegisterRequest {
  ProjectInfo project_info = 1;
}

// UnregisterRequest is sent by devloop to unregister from the gateway.
message UnregisterRequest {
  string project_id = 1;
}

// UpdateRuleStatusRequest is sent by devloop to update a rule's status.
message UpdateRuleStatusRequest {
  RuleStatus rule_status = 1;
}

// TriggerRuleRequest is sent by the gateway to devloop to trigger a rule.
message TriggerRuleRequest {
  string project_id = 1;
  string rule_name = 2;
}

// GetHistoricalLogsRequest is sent by the gateway to devloop to request historical logs.
message GetHistoricalLogsRequest {
  string project_id = 1;
  string rule_name = 2;
  string filter = 3;
  int64 start_time = 4; // Unix timestamp in milliseconds, for logs after this time
  int64 end_time = 5;   // Unix timestamp in milliseconds, for logs before this time
}

// GetConfigRequest is sent by the gateway to devloop to request config.
message GetConfigRequest {
  string project_id = 1;
}

// GetRuleStatusRequest is sent by the gateway to devloop to request rule status.
message GetRuleStatusRequest {
  string project_id = 1;
  string rule_name = 2;
}

// ListWatchedPathsRequest is sent by the gateway to devloop to request watched paths.
message ListWatchedPathsRequest {
  string project_id = 1;
}

// ReadFileContentRequest is sent by the gateway to devloop to request file content.
message ReadFileContentRequest {
  string project_id = 1;
  string path = 2;
}

// Responses from devloop to gateway
message GetConfigResponse {
  bytes config_json = 1;
}

message GetRuleStatusResponse {
  RuleStatus rule_status = 1;
}

message TriggerRuleResponse {
  bool success = 1;
  string message = 2;
}

message ListWatchedPathsResponse {
  repeated string paths = 1;
}

message ReadFileContentResponse {
  bytes content = 1;
}

// DevloopGatewayService defines the gRPC service for communication between devloop and the gateway.
service DevloopGatewayService {
  // Communicate handles all bidirectional communication between devloop and the gateway.
  rpc Communicate(stream DevloopMessage) returns (stream DevloopMessage);
}

// GatewayClientService defines the gRPC service for MCP clients to interact with the gateway.
service GatewayClientService {
  // List all registered devloop projects.
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {
      get: "/projects"
    };
  }

  // Get the configuration for a specific devloop project.
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse) {
    option (google.api.http) = {
      get: "/projects/{project_id}/config"
    };
  }

  // Get the detailed status of a specific rule within a project.
  rpc GetRuleStatus(GetRuleStatusRequest) returns (GetRuleStatusResponse) {
    option (google.api.http) = {
      get: "/projects/{project_id}/status/{rule_name}"
    };
  }

  // Manually trigger a specific rule in a devloop project.
  rpc TriggerRuleClient(TriggerRuleClientRequest) returns (TriggerRuleClientResponse) {
    option (google.api.http) = {
      post: "/projects/{project_id}/trigger/{rule_name}"
    };
  }

  // List all glob patterns being watched by a specific devloop project.
  rpc ListWatchedPaths(ListWatchedPathsRequest) returns (ListWatchedPathsResponse) {
    option (google.api.http) = {
      get: "/projects/{project_id}/watched-paths"
    };
  }

  // Read and return the content of a specific file within a devloop project.
  rpc ReadFileContent(ReadFileContentRequest) returns (ReadFileContentResponse) {
    option (google.api.http) = {
      get: "/projects/{project_id}/file-content"
    };
  }

  // Stream real-time logs for a specific rule in a project.
  rpc StreamLogsClient(StreamLogsClientRequest) returns (stream LogLine) {
    option (google.api.http) = {
      get: "/projects/{project_id}/stream/logs/{rule_name}"
    };
  }

  // Retrieve historical logs for a specific rule, with optional time filtering.
  rpc GetHistoricalLogsClient(GetHistoricalLogsClientRequest) returns (stream LogLine) {
    option (google.api.http) = {
      get: "/projects/{project_id}/historical-logs/{rule_name}"
    };
  }
}

// Messages for GatewayClientService

message ListProjectsRequest {
}

message ListProjectsResponse {
  message Project {
    string project_id = 1;
    string project_root = 2;
    string status = 3; // e.g., "CONNECTED", "DISCONNECTED"
  }
  repeated Project projects = 1;
}

message TriggerRuleClientRequest {
  string project_id = 1;
  string rule_name = 2;
}

message TriggerRuleClientResponse {
  bool success = 1;
  string message = 2;
}

message StreamLogsClientRequest {
  string project_id = 1;
  string rule_name = 2;
  string filter = 3;
}

message GetHistoricalLogsClientRequest {
  string project_id = 1;
  string rule_name = 2;
  string filter = 3;
  int64 start_time = 4; // Unix timestamp in milliseconds, for logs after this time
  int64 end_time = 5;   // Unix timestamp in milliseconds, for logs before this time
}
