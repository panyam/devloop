# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from devloop.v1 import devloop_gateway_pb2 as devloop_dot_v1_dot_devloop__gateway__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class DevloopGatewayServiceStub(object):
    """DevloopGatewayService defines the gRPC service for communication between devloop and the gateway.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/devloop_gateway.v1.DevloopGatewayService/Register',
                request_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.RegisterRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.Unregister = channel.unary_unary(
                '/devloop_gateway.v1.DevloopGatewayService/Unregister',
                request_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.UnregisterRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.UnregisterResponse.FromString,
                _registered_method=True)
        self.StreamLogs = channel.stream_stream(
                '/devloop_gateway.v1.DevloopGatewayService/StreamLogs',
                request_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.StreamLogsRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.StreamLogsResponse.FromString,
                _registered_method=True)
        self.UpdateRuleStatus = channel.unary_unary(
                '/devloop_gateway.v1.DevloopGatewayService/UpdateRuleStatus',
                request_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.UpdateRuleStatusRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.UpdateRuleStatusResponse.FromString,
                _registered_method=True)
        self.TriggerRule = channel.unary_unary(
                '/devloop_gateway.v1.DevloopGatewayService/TriggerRule',
                request_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.TriggerRuleRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.TriggerRuleResponse.FromString,
                _registered_method=True)
        self.GetHistoricalLogs = channel.unary_stream(
                '/devloop_gateway.v1.DevloopGatewayService/GetHistoricalLogs',
                request_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.GetHistoricalLogsRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.LogLine.FromString,
                _registered_method=True)


class DevloopGatewayServiceServicer(object):
    """DevloopGatewayService defines the gRPC service for communication between devloop and the gateway.
    """

    def Register(self, request, context):
        """Register a devloop instance with the gateway.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unregister(self, request, context):
        """Unregister a devloop instance from the gateway.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamLogs(self, request_iterator, context):
        """Stream real-time logs from devloop to the gateway.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRuleStatus(self, request, context):
        """Update the status of a rule from devloop to the gateway.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TriggerRule(self, request, context):
        """Trigger a rule on a devloop instance from the gateway.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHistoricalLogs(self, request, context):
        """Get historical logs from a devloop instance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DevloopGatewayServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.RegisterRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.RegisterResponse.SerializeToString,
            ),
            'Unregister': grpc.unary_unary_rpc_method_handler(
                    servicer.Unregister,
                    request_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.UnregisterRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.UnregisterResponse.SerializeToString,
            ),
            'StreamLogs': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamLogs,
                    request_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.StreamLogsRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.StreamLogsResponse.SerializeToString,
            ),
            'UpdateRuleStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRuleStatus,
                    request_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.UpdateRuleStatusRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.UpdateRuleStatusResponse.SerializeToString,
            ),
            'TriggerRule': grpc.unary_unary_rpc_method_handler(
                    servicer.TriggerRule,
                    request_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.TriggerRuleRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.TriggerRuleResponse.SerializeToString,
            ),
            'GetHistoricalLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.GetHistoricalLogs,
                    request_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.GetHistoricalLogsRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.LogLine.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'devloop_gateway.v1.DevloopGatewayService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('devloop_gateway.v1.DevloopGatewayService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DevloopGatewayService(object):
    """DevloopGatewayService defines the gRPC service for communication between devloop and the gateway.
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devloop_gateway.v1.DevloopGatewayService/Register',
            devloop_dot_v1_dot_devloop__gateway__pb2.RegisterRequest.SerializeToString,
            devloop_dot_v1_dot_devloop__gateway__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Unregister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devloop_gateway.v1.DevloopGatewayService/Unregister',
            devloop_dot_v1_dot_devloop__gateway__pb2.UnregisterRequest.SerializeToString,
            devloop_dot_v1_dot_devloop__gateway__pb2.UnregisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamLogs(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/devloop_gateway.v1.DevloopGatewayService/StreamLogs',
            devloop_dot_v1_dot_devloop__gateway__pb2.StreamLogsRequest.SerializeToString,
            devloop_dot_v1_dot_devloop__gateway__pb2.StreamLogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateRuleStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devloop_gateway.v1.DevloopGatewayService/UpdateRuleStatus',
            devloop_dot_v1_dot_devloop__gateway__pb2.UpdateRuleStatusRequest.SerializeToString,
            devloop_dot_v1_dot_devloop__gateway__pb2.UpdateRuleStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TriggerRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devloop_gateway.v1.DevloopGatewayService/TriggerRule',
            devloop_dot_v1_dot_devloop__gateway__pb2.TriggerRuleRequest.SerializeToString,
            devloop_dot_v1_dot_devloop__gateway__pb2.TriggerRuleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHistoricalLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/devloop_gateway.v1.DevloopGatewayService/GetHistoricalLogs',
            devloop_dot_v1_dot_devloop__gateway__pb2.GetHistoricalLogsRequest.SerializeToString,
            devloop_dot_v1_dot_devloop__gateway__pb2.LogLine.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class GatewayClientServiceStub(object):
    """GatewayClientService defines the gRPC service for MCP clients to interact with the gateway.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListProjects = channel.unary_unary(
                '/devloop_gateway.v1.GatewayClientService/ListProjects',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.ListProjectsResponse.FromString,
                _registered_method=True)
        self.GetConfig = channel.unary_unary(
                '/devloop_gateway.v1.GatewayClientService/GetConfig',
                request_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.GetConfigRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.GetConfigResponse.FromString,
                _registered_method=True)
        self.GetRuleStatus = channel.unary_unary(
                '/devloop_gateway.v1.GatewayClientService/GetRuleStatus',
                request_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.GetRuleStatusRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.GetRuleStatusResponse.FromString,
                _registered_method=True)
        self.TriggerRuleClient = channel.unary_unary(
                '/devloop_gateway.v1.GatewayClientService/TriggerRuleClient',
                request_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.TriggerRuleClientRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.TriggerRuleClientResponse.FromString,
                _registered_method=True)
        self.ListWatchedPaths = channel.unary_unary(
                '/devloop_gateway.v1.GatewayClientService/ListWatchedPaths',
                request_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.ListWatchedPathsRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.ListWatchedPathsResponse.FromString,
                _registered_method=True)
        self.ReadFileContent = channel.unary_unary(
                '/devloop_gateway.v1.GatewayClientService/ReadFileContent',
                request_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.ReadFileContentRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.ReadFileContentResponse.FromString,
                _registered_method=True)
        self.StreamLogsClient = channel.unary_stream(
                '/devloop_gateway.v1.GatewayClientService/StreamLogsClient',
                request_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.StreamLogsClientRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.LogLine.FromString,
                _registered_method=True)
        self.GetHistoricalLogsClient = channel.unary_stream(
                '/devloop_gateway.v1.GatewayClientService/GetHistoricalLogsClient',
                request_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.GetHistoricalLogsClientRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.LogLine.FromString,
                _registered_method=True)


class GatewayClientServiceServicer(object):
    """GatewayClientService defines the gRPC service for MCP clients to interact with the gateway.
    """

    def ListProjects(self, request, context):
        """List all registered devloop projects.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConfig(self, request, context):
        """Get the configuration for a specific devloop project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRuleStatus(self, request, context):
        """Get the detailed status of a specific rule within a project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TriggerRuleClient(self, request, context):
        """Manually trigger a specific rule in a devloop project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWatchedPaths(self, request, context):
        """List all glob patterns being watched by a specific devloop project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadFileContent(self, request, context):
        """Read and return the content of a specific file within a devloop project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamLogsClient(self, request, context):
        """Stream real-time logs for a specific rule in a project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHistoricalLogsClient(self, request, context):
        """Retrieve historical logs for a specific rule, with optional time filtering.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GatewayClientServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListProjects': grpc.unary_unary_rpc_method_handler(
                    servicer.ListProjects,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.ListProjectsResponse.SerializeToString,
            ),
            'GetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConfig,
                    request_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.GetConfigRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.GetConfigResponse.SerializeToString,
            ),
            'GetRuleStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRuleStatus,
                    request_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.GetRuleStatusRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.GetRuleStatusResponse.SerializeToString,
            ),
            'TriggerRuleClient': grpc.unary_unary_rpc_method_handler(
                    servicer.TriggerRuleClient,
                    request_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.TriggerRuleClientRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.TriggerRuleClientResponse.SerializeToString,
            ),
            'ListWatchedPaths': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWatchedPaths,
                    request_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.ListWatchedPathsRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.ListWatchedPathsResponse.SerializeToString,
            ),
            'ReadFileContent': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadFileContent,
                    request_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.ReadFileContentRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.ReadFileContentResponse.SerializeToString,
            ),
            'StreamLogsClient': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamLogsClient,
                    request_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.StreamLogsClientRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.LogLine.SerializeToString,
            ),
            'GetHistoricalLogsClient': grpc.unary_stream_rpc_method_handler(
                    servicer.GetHistoricalLogsClient,
                    request_deserializer=devloop_dot_v1_dot_devloop__gateway__pb2.GetHistoricalLogsClientRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_devloop__gateway__pb2.LogLine.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'devloop_gateway.v1.GatewayClientService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('devloop_gateway.v1.GatewayClientService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GatewayClientService(object):
    """GatewayClientService defines the gRPC service for MCP clients to interact with the gateway.
    """

    @staticmethod
    def ListProjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devloop_gateway.v1.GatewayClientService/ListProjects',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            devloop_dot_v1_dot_devloop__gateway__pb2.ListProjectsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devloop_gateway.v1.GatewayClientService/GetConfig',
            devloop_dot_v1_dot_devloop__gateway__pb2.GetConfigRequest.SerializeToString,
            devloop_dot_v1_dot_devloop__gateway__pb2.GetConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRuleStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devloop_gateway.v1.GatewayClientService/GetRuleStatus',
            devloop_dot_v1_dot_devloop__gateway__pb2.GetRuleStatusRequest.SerializeToString,
            devloop_dot_v1_dot_devloop__gateway__pb2.GetRuleStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TriggerRuleClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devloop_gateway.v1.GatewayClientService/TriggerRuleClient',
            devloop_dot_v1_dot_devloop__gateway__pb2.TriggerRuleClientRequest.SerializeToString,
            devloop_dot_v1_dot_devloop__gateway__pb2.TriggerRuleClientResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListWatchedPaths(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devloop_gateway.v1.GatewayClientService/ListWatchedPaths',
            devloop_dot_v1_dot_devloop__gateway__pb2.ListWatchedPathsRequest.SerializeToString,
            devloop_dot_v1_dot_devloop__gateway__pb2.ListWatchedPathsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadFileContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devloop_gateway.v1.GatewayClientService/ReadFileContent',
            devloop_dot_v1_dot_devloop__gateway__pb2.ReadFileContentRequest.SerializeToString,
            devloop_dot_v1_dot_devloop__gateway__pb2.ReadFileContentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamLogsClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/devloop_gateway.v1.GatewayClientService/StreamLogsClient',
            devloop_dot_v1_dot_devloop__gateway__pb2.StreamLogsClientRequest.SerializeToString,
            devloop_dot_v1_dot_devloop__gateway__pb2.LogLine.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHistoricalLogsClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/devloop_gateway.v1.GatewayClientService/GetHistoricalLogsClient',
            devloop_dot_v1_dot_devloop__gateway__pb2.GetHistoricalLogsClientRequest.SerializeToString,
            devloop_dot_v1_dot_devloop__gateway__pb2.LogLine.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
