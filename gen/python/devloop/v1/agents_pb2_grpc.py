# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from devloop.v1 import agents_pb2 as devloop_dot_v1_dot_agents__pb2


class AgentServiceStub(object):
    """AgentService defines the gRPC service for clients to interact with
    a single devloop instance for automated development workflows and monitoring.

    Common Workflow Patterns:
    1. GetConfig -> GetConfig() -> understand available rules
    2. Build/Test: TriggerRule(rule_name) -> GetRule() -> monitor progress
    3. Debugging: GetRule() -> ReadFileContent() -> analyze issues
    4. Monitoring: ListWatchedPaths() -> understand what files trigger rebuilds
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetConfig = channel.unary_unary(
                '/devloop.v1.AgentService/GetConfig',
                request_serializer=devloop_dot_v1_dot_agents__pb2.GetConfigRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_agents__pb2.GetConfigResponse.FromString,
                _registered_method=True)
        self.GetRule = channel.unary_unary(
                '/devloop.v1.AgentService/GetRule',
                request_serializer=devloop_dot_v1_dot_agents__pb2.GetRuleRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_agents__pb2.GetRuleResponse.FromString,
                _registered_method=True)
        self.TriggerRule = channel.unary_unary(
                '/devloop.v1.AgentService/TriggerRule',
                request_serializer=devloop_dot_v1_dot_agents__pb2.TriggerRuleRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_agents__pb2.TriggerRuleResponse.FromString,
                _registered_method=True)
        self.ListWatchedPaths = channel.unary_unary(
                '/devloop.v1.AgentService/ListWatchedPaths',
                request_serializer=devloop_dot_v1_dot_agents__pb2.ListWatchedPathsRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_agents__pb2.ListWatchedPathsResponse.FromString,
                _registered_method=True)
        self.StreamLogs = channel.unary_stream(
                '/devloop.v1.AgentService/StreamLogs',
                request_serializer=devloop_dot_v1_dot_agents__pb2.StreamLogsRequest.SerializeToString,
                response_deserializer=devloop_dot_v1_dot_agents__pb2.StreamLogsResponse.FromString,
                _registered_method=True)


class AgentServiceServicer(object):
    """AgentService defines the gRPC service for clients to interact with
    a single devloop instance for automated development workflows and monitoring.

    Common Workflow Patterns:
    1. GetConfig -> GetConfig() -> understand available rules
    2. Build/Test: TriggerRule(rule_name) -> GetRule() -> monitor progress
    3. Debugging: GetRule() -> ReadFileContent() -> analyze issues
    4. Monitoring: ListWatchedPaths() -> understand what files trigger rebuilds
    """

    def GetConfig(self, request, context):
        """Retrieve the complete devloop configuration for a project to understand
        available rules, commands, file watch patterns, and project settings.

        Essential information provided:
        - Available build/test rules (rules[].name)
        - Commands executed by each rule (rules[].commands)
        - File patterns that trigger each rule (rules[].watch patterns)
        - Project settings like colors, logging, debouncing

        Usage Examples:
        - Discover available rules: Parse rules[].name from response
        - Find test commands: Look for rules with "test" in name or commands
        - Understand file triggers: Examine rules[].watch.patterns

        Response Format: JSON string containing the complete .devloop.yaml content
        with resolved settings and rule definitions.
        mcp_tool_name:get_config
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRule(self, request, context):
        """Get the current execution status and history of a specific rule.
        Use this to monitor build/test progress and check for failures.

        Status Information Provided:
        - Whether the rule is currently running
        - When the current/last execution started
        - Result of the last execution (SUCCESS, FAILED, RUNNING, IDLE)
        - Execution history timestamps

        Common Use Cases:
        - Check if a build is still running after triggering
        - Verify if tests passed or failed
        - Monitor long-running development servers
        - Debug why a rule isn't executing

        Returns: Detailed status including timing and execution results
        mcp_tool_name:get_rule_status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TriggerRule(self, request, context):
        """Manually execute a specific rule to run builds, tests, or other commands.
        This bypasses file watching and immediately starts the rule's command sequence.

        Trigger Behavior:
        - Terminates any currently running instance of the rule
        - Executes all commands in the rule definition sequentially
        - Updates rule status to RUNNING, then SUCCESS/FAILED based on results
        - Generates log output that can be retrieved via streaming endpoints

        Common Use Cases:
        - Run builds on demand ("trigger the backend build")
        - Execute test suites ("run the test rule")
        - Restart development servers ("trigger the dev-server rule")
        - Force regeneration ("trigger the protobuf rule")

        Returns: Immediate response indicating if trigger was accepted
        Use GetRule() to monitor actual execution progress
        mcp_tool_name:trigger_rule
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWatchedPaths(self, request, context):
        """List all file glob patterns being monitored by a project for automatic rule triggering.
        Use this to understand what files cause rebuilds and which rules will execute.

        Pattern Information:
        - All include/exclude patterns from all rules combined
        - Glob syntax: **/*.go, src/**/*.js, **/test_*.py, etc.
        - Patterns are resolved relative to the project root

        Common Use Cases:
        - Understand what file changes trigger builds
        - Debug why edits aren't triggering rules
        - Plan file organization to optimize build triggers
        - Analyze project structure and dependencies

        Returns: Array of glob patterns currently being watched
        mcp_tool_name:list_watched_paths
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamLogs(self, request, context):
        """Stream real-time logs for a specific rule in a project.
        mcp_tool_name:stream_logs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConfig,
                    request_deserializer=devloop_dot_v1_dot_agents__pb2.GetConfigRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_agents__pb2.GetConfigResponse.SerializeToString,
            ),
            'GetRule': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRule,
                    request_deserializer=devloop_dot_v1_dot_agents__pb2.GetRuleRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_agents__pb2.GetRuleResponse.SerializeToString,
            ),
            'TriggerRule': grpc.unary_unary_rpc_method_handler(
                    servicer.TriggerRule,
                    request_deserializer=devloop_dot_v1_dot_agents__pb2.TriggerRuleRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_agents__pb2.TriggerRuleResponse.SerializeToString,
            ),
            'ListWatchedPaths': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWatchedPaths,
                    request_deserializer=devloop_dot_v1_dot_agents__pb2.ListWatchedPathsRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_agents__pb2.ListWatchedPathsResponse.SerializeToString,
            ),
            'StreamLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamLogs,
                    request_deserializer=devloop_dot_v1_dot_agents__pb2.StreamLogsRequest.FromString,
                    response_serializer=devloop_dot_v1_dot_agents__pb2.StreamLogsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'devloop.v1.AgentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('devloop.v1.AgentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentService(object):
    """AgentService defines the gRPC service for clients to interact with
    a single devloop instance for automated development workflows and monitoring.

    Common Workflow Patterns:
    1. GetConfig -> GetConfig() -> understand available rules
    2. Build/Test: TriggerRule(rule_name) -> GetRule() -> monitor progress
    3. Debugging: GetRule() -> ReadFileContent() -> analyze issues
    4. Monitoring: ListWatchedPaths() -> understand what files trigger rebuilds
    """

    @staticmethod
    def GetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devloop.v1.AgentService/GetConfig',
            devloop_dot_v1_dot_agents__pb2.GetConfigRequest.SerializeToString,
            devloop_dot_v1_dot_agents__pb2.GetConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devloop.v1.AgentService/GetRule',
            devloop_dot_v1_dot_agents__pb2.GetRuleRequest.SerializeToString,
            devloop_dot_v1_dot_agents__pb2.GetRuleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TriggerRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devloop.v1.AgentService/TriggerRule',
            devloop_dot_v1_dot_agents__pb2.TriggerRuleRequest.SerializeToString,
            devloop_dot_v1_dot_agents__pb2.TriggerRuleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListWatchedPaths(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/devloop.v1.AgentService/ListWatchedPaths',
            devloop_dot_v1_dot_agents__pb2.ListWatchedPathsRequest.SerializeToString,
            devloop_dot_v1_dot_agents__pb2.ListWatchedPathsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/devloop.v1.AgentService/StreamLogs',
            devloop_dot_v1_dot_agents__pb2.StreamLogsRequest.SerializeToString,
            devloop_dot_v1_dot_agents__pb2.StreamLogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
