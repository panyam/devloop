{
  "swagger": "2.0",
  "info": {
    "title": "mcp/v1/annotations.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "AgentService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/config": {
      "get": {
        "summary": "Retrieve the complete devloop configuration for a project to understand\navailable rules, commands, file watch patterns, and project settings.",
        "description": "Essential information provided:\n- Available build/test rules (rules[].name)\n- Commands executed by each rule (rules[].commands)\n- File patterns that trigger each rule (rules[].watch patterns)\n- Project settings like colors, logging, debouncing\n\nUsage Examples:\n- Discover available rules: Parse rules[].name from response\n- Find test commands: Look for rules with \"test\" in name or commands\n- Understand file triggers: Examine rules[].watch.patterns\n\nResponse Format: JSON string containing the complete .devloop.yaml content\nwith resolved settings and rule definitions.\nmcp_tool_name:get_config",
        "operationId": "AgentService_GetConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "AgentService"
        ]
      }
    },
    "/status/{ruleName}": {
      "get": {
        "summary": "Get the current execution status and history of a specific rule.\nUse this to monitor build/test progress and check for failures.",
        "description": "Status Information Provided:\n- Whether the rule is currently running\n- When the current/last execution started\n- Result of the last execution (SUCCESS, FAILED, RUNNING, IDLE)\n- Execution history timestamps\n\nCommon Use Cases:\n- Check if a build is still running after triggering\n- Verify if tests passed or failed\n- Monitor long-running development servers\n- Debug why a rule isn't executing\n\nReturns: Detailed status including timing and execution results\nmcp_tool_name:get_rule_status",
        "operationId": "AgentService_GetRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ruleName",
            "description": "Required: The name of the rule to check status for.\nMust match a rule name from GetConfig() response (rules[].name).\nExamples: \"backend\", \"frontend\", \"tests\", \"build\"",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/stream/logs/{ruleName}": {
      "get": {
        "summary": "Stream real-time logs for a specific rule in a project.",
        "operationId": "AgentService_StreamLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1StreamLogsResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1StreamLogsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ruleName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/trigger/{ruleName}": {
      "post": {
        "summary": "Manually execute a specific rule to run builds, tests, or other commands.\nThis bypasses file watching and immediately starts the rule's command sequence.",
        "description": "Trigger Behavior:\n- Terminates any currently running instance of the rule\n- Executes all commands in the rule definition sequentially\n- Updates rule status to RUNNING, then SUCCESS/FAILED based on results\n- Generates log output that can be retrieved via streaming endpoints\n\nCommon Use Cases:\n- Run builds on demand (\"trigger the backend build\")\n- Execute test suites (\"run the test rule\")\n- Restart development servers (\"trigger the dev-server rule\")\n- Force regeneration (\"trigger the protobuf rule\")\n\nReturns: Immediate response indicating if trigger was accepted\nUse GetRule() to monitor actual execution progress\nmcp_tool_name:trigger_rule",
        "operationId": "AgentService_TriggerRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TriggerRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ruleName",
            "description": "Required: The name of the rule to execute.\nMust match a rule name from GetConfig() response (rules[].name).\nExamples: \"backend\", \"frontend\", \"tests\", \"build\"",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/watched-paths": {
      "get": {
        "summary": "List all file glob patterns being monitored by a project for automatic rule triggering.\nUse this to understand what files cause rebuilds and which rules will execute.",
        "description": "Pattern Information:\n- All include/exclude patterns from all rules combined\n- Glob syntax: **/*.go, src/**/*.js, **/test_*.py, etc.\n- Patterns are resolved relative to the project root\n\nCommon Use Cases:\n- Understand what file changes trigger builds\n- Debug why edits aren't triggering rules\n- Plan file organization to optimize build triggers\n- Analyze project structure and dependencies\n\nReturns: Array of glob patterns currently being watched\nmcp_tool_name:list_watched_paths",
        "operationId": "AgentService_ListWatchedPaths",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListWatchedPathsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "AgentService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Config": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "settings": {
          "$ref": "#/definitions/v1Settings"
        },
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Rule"
          }
        }
      }
    },
    "v1GetConfigResponse": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1Config",
          "description": "Complete project configuration as JSON string.\nContains: settings (logging, colors), rules (name, commands, watch patterns)\nParse this JSON to understand available rule names and their configurations."
        }
      },
      "description": "GetConfigResponse contains the complete project configuration."
    },
    "v1GetRuleResponse": {
      "type": "object",
      "properties": {
        "rule": {
          "$ref": "#/definitions/v1Rule",
          "description": "Detailed status information including execution state, timing, and results.\nCheck rule_status.is_running to see if currently executing.\nCheck rule_status.last_build_status for SUCCESS/FAILED/IDLE state."
        }
      },
      "description": "GetRuleResponse contains the current status and history of a rule."
    },
    "v1ListWatchedPathsResponse": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Array of glob patterns that trigger rule execution when matched files change.\nExamples: \"**/*.go\", \"src/**/*.js\", \"package.json\", \"**/test_*.py\""
        }
      },
      "description": "ListWatchedPathsResponse contains all file patterns being monitored."
    },
    "v1LogLine": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "title": "The project that generated this log line"
        },
        "ruleName": {
          "type": "string",
          "title": "The specific rule that produced this output (e.g., \"backend\", \"frontend\", \"tests\")"
        },
        "line": {
          "type": "string",
          "title": "The actual log content/output line from the command\nThis includes all stdout/stderr from the rule's commands"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "When this log line was generated (Unix timestamp in milliseconds)\nUse this for time-based filtering and chronological ordering"
        }
      },
      "description": "LogLine represents a single log entry from a rule execution.\nUsed for streaming real-time logs and retrieving historical log data."
    },
    "v1Rule": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "title": "The project this rule belongs to"
        },
        "name": {
          "type": "string",
          "title": "The rule name (e.g., \"backend\", \"frontend\", \"tests\")\nMust match a rule name from the project's .devloop.yaml configuration"
        },
        "commands": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The commands that will be executed for this rule"
        },
        "watch": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RuleMatcher"
          },
          "title": "The rule matchers and the actions to take for them"
        },
        "defaultAction": {
          "type": "string",
          "title": "What to do when a file does not match any pattern by default"
        },
        "prefix": {
          "type": "string",
          "title": "Prefix for this rule"
        },
        "workDir": {
          "type": "string",
          "description": "The workdir for this rule.  If not specified then will default to the directory where the devloop config is in."
        },
        "runOnInit": {
          "type": "boolean",
          "title": "Whether to run on init or not"
        },
        "verbose": {
          "type": "boolean",
          "title": "Whether the rule will have verbose logs or not"
        },
        "debounceDelay": {
          "type": "string",
          "format": "uint64",
          "title": "Delay for debouncing if rules matched multiple times in rapid successession"
        },
        "color": {
          "type": "string",
          "title": "Color to use to show the logs for this rule"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/v1RuleStatus",
          "title": "Status of this rule"
        }
      }
    },
    "v1RuleMatcher": {
      "type": "object",
      "properties": {
        "patterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Patterns to match this rule for"
        },
        "action": {
          "type": "string",
          "title": "Action to take when rule matches - currently \"include\" | \"exclude\""
        }
      }
    },
    "v1RuleStatus": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "ruleName": {
          "type": "string"
        },
        "isRunning": {
          "type": "boolean",
          "title": "Whether the rule is currently executing commands\ntrue = commands are running, false = rule is idle"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "When the current execution started (Unix timestamp in milliseconds)\nOnly meaningful when is_running = true"
        },
        "lastBuildTime": {
          "type": "string",
          "format": "date-time",
          "title": "When the last execution completed (Unix timestamp in milliseconds)\nUse this to check how recently a rule was executed"
        },
        "lastBuildStatus": {
          "type": "string",
          "title": "Result of the last execution. Possible values:\n- \"SUCCESS\": All commands completed successfully (exit code 0)\n- \"FAILED\": One or more commands failed (non-zero exit code)\n- \"RUNNING\": Rule is currently executing\n- \"IDLE\": Rule has not been executed yet"
        }
      },
      "description": "RuleStatus represents the current execution status and history of a rule.\nUse this to monitor build/test progress and check for failures."
    },
    "v1Settings": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "prefixLogs": {
          "type": "boolean",
          "title": "Whether to prefix logs with rule name or not"
        },
        "prefixMaxLength": {
          "type": "integer",
          "format": "int64",
          "description": "Length of the prefix to format in if prefixing logs."
        },
        "defaultDebounceDelay": {
          "type": "string",
          "format": "uint64",
          "title": "Default debounce delay for all rules if they do not have their own DB delay specified"
        },
        "verbose": {
          "type": "boolean",
          "title": "Whether to log verbosely or not"
        },
        "colorLogs": {
          "type": "boolean"
        },
        "colorScheme": {
          "type": "string"
        },
        "customColors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "defaultWatchAction": {
          "type": "string"
        }
      },
      "description": "Settings defines global settings for devloop."
    },
    "v1StreamLogsResponse": {
      "type": "object",
      "properties": {
        "lines": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LogLine"
          }
        }
      }
    },
    "v1TriggerRuleResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "Whether the trigger request was accepted and rule execution started.\ntrue = rule is now running, false = trigger rejected"
        },
        "message": {
          "type": "string",
          "description": "Human-readable message explaining the result.\nUse GetRule() to monitor actual execution progress."
        }
      },
      "description": "TriggerRuleResponse indicates whether the rule trigger was accepted."
    }
  }
}
