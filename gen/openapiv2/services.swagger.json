{
  "swagger": "2.0",
  "info": {
    "title": "mcp/v1/annotations.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "DevloopGatewayService"
    },
    {
      "name": "GatewayClientService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/projects": {
      "get": {
        "summary": "Discover all available devloop projects for automation and monitoring.",
        "description": "Use this as the starting point for any development workflow automation.\nProjects must be running in agent mode and connected to appear in results.\n\nTypical workflow:\n1. Call ListProjects() to see what's available\n2. Choose a project_id from the results\n3. Call GetConfig(project_id) to see available rules\n4. Use TriggerRuleClient(project_id, rule_name) to run builds/tests\n\nReturns: List of projects with their IDs, paths, and connection status\nmcp_tool_name:list_projects",
        "operationId": "GatewayClientService_ListProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GatewayClientService"
        ]
      }
    },
    "/projects/{projectId}/config": {
      "get": {
        "summary": "Retrieve the complete devloop configuration for a project to understand\navailable rules, commands, file watch patterns, and project settings.",
        "description": "Essential information provided:\n- Available build/test rules (rules[].name)\n- Commands executed by each rule (rules[].commands)\n- File patterns that trigger each rule (rules[].watch patterns)\n- Project settings like colors, logging, debouncing\n\nUsage Examples:\n- Discover available rules: Parse rules[].name from response\n- Find test commands: Look for rules with \"test\" in name or commands\n- Understand file triggers: Examine rules[].watch.patterns\n\nResponse Format: JSON string containing the complete .devloop.yaml content\nwith resolved settings and rule definitions.\nmcp_tool_name:get_config",
        "operationId": "GatewayClientService_GetConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "description": "Required: The unique identifier of the project.\nMust be a valid project_id from ListProjects() response.\nExamples: \"my-backend\", \"frontend-app\", \"user-service\"",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GatewayClientService"
        ]
      }
    },
    "/projects/{projectId}/file-content": {
      "get": {
        "summary": "Read and return the content of a specific file within a devloop project.\nProvides secure access to project files for analysis and debugging.",
        "description": "File Access:\n- Paths are relative to the project root directory\n- Access is restricted to files within the project\n- Supports text and binary files\n- No path traversal (../) allowed for security\n\nCommon Use Cases:\n- Read configuration files (.devloop.yaml, package.json, go.mod)\n- Analyze source code for debugging build failures\n- Examine log files generated by rules\n- Inspect test output and error messages\n\nSecurity: Only files within the project root are accessible\nReturns: Raw file content as bytes\nmcp_tool_name:read_file_content",
        "operationId": "GatewayClientService_ReadFileContent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReadFileContentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "description": "Required: The unique identifier of the project.\nMust be a valid project_id from ListProjects() response.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path",
            "description": "Required: Relative path to the file within the project root.\nMust be within the project directory (no ../ path traversal).\nExamples: \"src/main.go\", \"package.json\", \".devloop.yaml\", \"logs/build.log\"",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GatewayClientService"
        ]
      }
    },
    "/projects/{projectId}/historical-logs/{ruleName}": {
      "get": {
        "summary": "Retrieve historical logs for a specific rule, with optional time filtering.",
        "operationId": "GatewayClientService_GetHistoricalLogsClient",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1LogLine"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1LogLine"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTime",
            "description": "Unix timestamp in milliseconds, for logs after this time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTime",
            "description": "Unix timestamp in milliseconds, for logs before this time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "GatewayClientService"
        ]
      }
    },
    "/projects/{projectId}/status/{ruleName}": {
      "get": {
        "summary": "Get the current execution status and history of a specific rule.\nUse this to monitor build/test progress and check for failures.",
        "description": "Status Information Provided:\n- Whether the rule is currently running\n- When the current/last execution started\n- Result of the last execution (SUCCESS, FAILED, RUNNING, IDLE)\n- Execution history timestamps\n\nCommon Use Cases:\n- Check if a build is still running after triggering\n- Verify if tests passed or failed\n- Monitor long-running development servers\n- Debug why a rule isn't executing\n\nReturns: Detailed status including timing and execution results\nmcp_tool_name:get_rule_status",
        "operationId": "GatewayClientService_GetRuleStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRuleStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "description": "Required: The unique identifier of the project.\nMust be a valid project_id from ListProjects() response.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleName",
            "description": "Required: The name of the rule to check status for.\nMust match a rule name from GetConfig() response (rules[].name).\nExamples: \"backend\", \"frontend\", \"tests\", \"build\"",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GatewayClientService"
        ]
      }
    },
    "/projects/{projectId}/stream/logs/{ruleName}": {
      "get": {
        "summary": "Stream real-time logs for a specific rule in a project.",
        "operationId": "GatewayClientService_StreamLogsClient",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1LogLine"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1LogLine"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GatewayClientService"
        ]
      }
    },
    "/projects/{projectId}/trigger/{ruleName}": {
      "post": {
        "summary": "Manually execute a specific rule to run builds, tests, or other commands.\nThis bypasses file watching and immediately starts the rule's command sequence.",
        "description": "Trigger Behavior:\n- Terminates any currently running instance of the rule\n- Executes all commands in the rule definition sequentially\n- Updates rule status to RUNNING, then SUCCESS/FAILED based on results\n- Generates log output that can be retrieved via streaming endpoints\n\nCommon Use Cases:\n- Run builds on demand (\"trigger the backend build\")\n- Execute test suites (\"run the test rule\")\n- Restart development servers (\"trigger the dev-server rule\")\n- Force regeneration (\"trigger the protobuf rule\")\n\nReturns: Immediate response indicating if trigger was accepted\nUse GetRuleStatus() to monitor actual execution progress\nmcp_tool_name:trigger_rule",
        "operationId": "GatewayClientService_TriggerRuleClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TriggerRuleClientResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "description": "Required: The unique identifier of the project.\nMust be a valid project_id from ListProjects() response.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleName",
            "description": "Required: The name of the rule to execute.\nMust match a rule name from GetConfig() response (rules[].name).\nExamples: \"backend\", \"frontend\", \"tests\", \"build\"",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GatewayClientService"
        ]
      }
    },
    "/projects/{projectId}/watched-paths": {
      "get": {
        "summary": "List all file glob patterns being monitored by a project for automatic rule triggering.\nUse this to understand what files cause rebuilds and which rules will execute.",
        "description": "Pattern Information:\n- All include/exclude patterns from all rules combined\n- Glob syntax: **/*.go, src/**/*.js, **/test_*.py, etc.\n- Patterns are resolved relative to the project root\n\nCommon Use Cases:\n- Understand what file changes trigger builds\n- Debug why edits aren't triggering rules\n- Plan file organization to optimize build triggers\n- Analyze project structure and dependencies\n\nReturns: Array of glob patterns currently being watched\nmcp_tool_name:list_watched_paths",
        "operationId": "GatewayClientService_ListWatchedPaths",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListWatchedPathsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "description": "Required: The unique identifier of the project.\nMust be a valid project_id from ListProjects() response.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GatewayClientService"
        ]
      }
    }
  },
  "definitions": {
    "ListProjectsResponseProject": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "title": "Unique identifier for the project (from devloop.yaml or auto-generated)"
        },
        "projectRoot": {
          "type": "string",
          "title": "Absolute path to the project's root directory"
        },
        "status": {
          "type": "string",
          "title": "Current connection status:\n\"CONNECTED\" = project is online and responsive\n\"DISCONNECTED\" = project is offline or unreachable"
        }
      },
      "title": "Individual project information"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1DevloopMessage": {
      "type": "object",
      "properties": {
        "correlationId": {
          "type": "string",
          "title": "Used to correlate requests and responses"
        },
        "registerRequest": {
          "$ref": "#/definitions/v1RegisterRequest",
          "title": "Messages sent from devloop to gateway"
        },
        "unregisterRequest": {
          "$ref": "#/definitions/v1UnregisterRequest"
        },
        "logLine": {
          "$ref": "#/definitions/v1LogLine"
        },
        "updateRuleStatusRequest": {
          "$ref": "#/definitions/v1UpdateRuleStatusRequest"
        },
        "getConfigResponse": {
          "$ref": "#/definitions/v1GetConfigResponse"
        },
        "getRuleStatusResponse": {
          "$ref": "#/definitions/v1GetRuleStatusResponse"
        },
        "triggerRuleResponse": {
          "$ref": "#/definitions/v1TriggerRuleResponse"
        },
        "listWatchedPathsResponse": {
          "$ref": "#/definitions/v1ListWatchedPathsResponse"
        },
        "readFileContentResponse": {
          "$ref": "#/definitions/v1ReadFileContentResponse"
        },
        "triggerRuleRequest": {
          "$ref": "#/definitions/v1TriggerRuleRequest",
          "title": "Messages sent from gateway to devloop"
        },
        "getConfigRequest": {
          "$ref": "#/definitions/v1GetConfigRequest"
        },
        "getRuleStatusRequest": {
          "$ref": "#/definitions/v1GetRuleStatusRequest"
        },
        "listWatchedPathsRequest": {
          "$ref": "#/definitions/v1ListWatchedPathsRequest"
        },
        "readFileContentRequest": {
          "$ref": "#/definitions/v1ReadFileContentRequest"
        },
        "getHistoricalLogsRequest": {
          "$ref": "#/definitions/v1GetHistoricalLogsRequest"
        }
      },
      "description": "DevloopMessage is a wrapper for all messages exchanged between devloop and the gateway."
    },
    "v1GetConfigRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "title": "Required: The unique identifier of the project.\nMust be a valid project_id from ListProjects() response.\nExamples: \"my-backend\", \"frontend-app\", \"user-service\""
        }
      },
      "description": "GetConfigRequest retrieves the complete configuration for a specific project."
    },
    "v1GetConfigResponse": {
      "type": "object",
      "properties": {
        "configJson": {
          "type": "string",
          "format": "byte",
          "description": "Complete project configuration as JSON string.\nContains: settings (project_id, logging, colors), rules (name, commands, watch patterns)\nParse this JSON to understand available rule names and their configurations."
        }
      },
      "description": "GetConfigResponse contains the complete project configuration."
    },
    "v1GetHistoricalLogsRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "ruleName": {
          "type": "string"
        },
        "filter": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "int64",
          "title": "Unix timestamp in milliseconds, for logs after this time"
        },
        "endTime": {
          "type": "string",
          "format": "int64",
          "title": "Unix timestamp in milliseconds, for logs before this time"
        }
      },
      "description": "GetHistoricalLogsRequest is sent by the gateway to devloop to request historical logs."
    },
    "v1GetRuleStatusRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "description": "Required: The unique identifier of the project.\nMust be a valid project_id from ListProjects() response."
        },
        "ruleName": {
          "type": "string",
          "title": "Required: The name of the rule to check status for.\nMust match a rule name from GetConfig() response (rules[].name).\nExamples: \"backend\", \"frontend\", \"tests\", \"build\""
        }
      },
      "description": "GetRuleStatusRequest retrieves the execution status of a specific rule."
    },
    "v1GetRuleStatusResponse": {
      "type": "object",
      "properties": {
        "ruleStatus": {
          "$ref": "#/definitions/v1RuleStatus",
          "description": "Detailed status information including execution state, timing, and results.\nCheck rule_status.is_running to see if currently executing.\nCheck rule_status.last_build_status for SUCCESS/FAILED/IDLE state."
        }
      },
      "description": "GetRuleStatusResponse contains the current status and history of a rule."
    },
    "v1ListProjectsResponse": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ListProjectsResponseProject"
          },
          "description": "Array of all available projects. Use project_id for subsequent calls."
        }
      },
      "description": "ListProjectsResponse contains all discovered devloop projects."
    },
    "v1ListWatchedPathsRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "description": "Required: The unique identifier of the project.\nMust be a valid project_id from ListProjects() response."
        }
      },
      "description": "ListWatchedPathsRequest retrieves all file patterns being monitored by a project."
    },
    "v1ListWatchedPathsResponse": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Array of glob patterns that trigger rule execution when matched files change.\nExamples: \"**/*.go\", \"src/**/*.js\", \"package.json\", \"**/test_*.py\""
        }
      },
      "description": "ListWatchedPathsResponse contains all file patterns being monitored."
    },
    "v1LogLine": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "title": "The project that generated this log line"
        },
        "ruleName": {
          "type": "string",
          "title": "The specific rule that produced this output (e.g., \"backend\", \"frontend\", \"tests\")"
        },
        "line": {
          "type": "string",
          "title": "The actual log content/output line from the command\nThis includes all stdout/stderr from the rule's commands"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "When this log line was generated (Unix timestamp in milliseconds)\nUse this for time-based filtering and chronological ordering"
        }
      },
      "description": "LogLine represents a single log entry from a rule execution.\nUsed for streaming real-time logs and retrieving historical log data."
    },
    "v1ProjectInfo": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "title": "Unique identifier for the project. This can be:\n- Manually set in devloop.yaml settings.project_id (recommended for AI tools)\n- Auto-generated from the project directory path (fallback)\nExamples: \"my-backend\", \"frontend-app\", \"user-service\""
        },
        "projectRoot": {
          "type": "string",
          "title": "Absolute path to the project's root directory containing .devloop.yaml\nThis is where all relative paths in commands and file operations are resolved from.\nExample: \"/Users/dev/projects/my-app\""
        }
      },
      "description": "ProjectInfo represents the information about a registered devloop project.\nThis contains the core identification and location data for a project."
    },
    "v1ReadFileContentRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "description": "Required: The unique identifier of the project.\nMust be a valid project_id from ListProjects() response."
        },
        "path": {
          "type": "string",
          "title": "Required: Relative path to the file within the project root.\nMust be within the project directory (no ../ path traversal).\nExamples: \"src/main.go\", \"package.json\", \".devloop.yaml\", \"logs/build.log\""
        }
      },
      "description": "ReadFileContentRequest retrieves the content of a specific file within a project."
    },
    "v1ReadFileContentResponse": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "format": "byte",
          "description": "Raw file content as bytes. For text files, convert to string.\nFor binary files, handle appropriately based on file type.\nEmpty if file doesn't exist or is not accessible."
        }
      },
      "description": "ReadFileContentResponse contains the raw content of a requested file."
    },
    "v1RegisterRequest": {
      "type": "object",
      "properties": {
        "projectInfo": {
          "$ref": "#/definitions/v1ProjectInfo"
        }
      },
      "description": "RegisterRequest is sent by devloop to register with the gateway."
    },
    "v1RuleStatus": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "title": "The project this rule belongs to"
        },
        "ruleName": {
          "type": "string",
          "title": "The rule name (e.g., \"backend\", \"frontend\", \"tests\")\nMust match a rule name from the project's .devloop.yaml configuration"
        },
        "isRunning": {
          "type": "boolean",
          "title": "Whether the rule is currently executing commands\ntrue = commands are running, false = rule is idle"
        },
        "startTime": {
          "type": "string",
          "format": "int64",
          "title": "When the current execution started (Unix timestamp in milliseconds)\nOnly meaningful when is_running = true"
        },
        "lastBuildTime": {
          "type": "string",
          "format": "int64",
          "title": "When the last execution completed (Unix timestamp in milliseconds)\nUse this to check how recently a rule was executed"
        },
        "lastBuildStatus": {
          "type": "string",
          "title": "Result of the last execution. Possible values:\n- \"SUCCESS\": All commands completed successfully (exit code 0)\n- \"FAILED\": One or more commands failed (non-zero exit code)\n- \"RUNNING\": Rule is currently executing\n- \"IDLE\": Rule has not been executed yet"
        }
      },
      "description": "RuleStatus represents the current execution status and history of a rule.\nUse this to monitor build/test progress and check for failures."
    },
    "v1TriggerRuleClientResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "Whether the trigger request was accepted and rule execution started.\ntrue = rule is now running, false = trigger rejected"
        },
        "message": {
          "type": "string",
          "description": "Human-readable message explaining the result.\nUse GetRuleStatus() to monitor actual execution progress."
        }
      },
      "description": "TriggerRuleClientResponse indicates whether the rule trigger was accepted."
    },
    "v1TriggerRuleRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "ruleName": {
          "type": "string"
        }
      },
      "description": "TriggerRuleRequest is sent by the gateway to devloop to trigger a rule."
    },
    "v1TriggerRuleResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "Whether the trigger request was accepted and rule execution started.\ntrue = rule is now running, false = trigger rejected (invalid rule/project)"
        },
        "message": {
          "type": "string",
          "title": "Human-readable message explaining the result.\nOn success: \"Rule 'backend' triggered successfully\"\nOn failure: \"Rule 'invalid' not found in project\""
        }
      },
      "description": "TriggerRuleResponse indicates whether a rule trigger was accepted."
    },
    "v1UnregisterRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        }
      },
      "description": "UnregisterRequest is sent by devloop to unregister from the gateway."
    },
    "v1UpdateRuleStatusRequest": {
      "type": "object",
      "properties": {
        "ruleStatus": {
          "$ref": "#/definitions/v1RuleStatus"
        }
      },
      "description": "UpdateRuleStatusRequest is sent by devloop to update a rule's status."
    }
  }
}
