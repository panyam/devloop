// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: devloop/v1/models.proto

package v1

import (
	_ "github.com/redpanda-data/protoc-gen-go-mcp/proto/gen/go/mcp/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProjectInfo represents the information about a registered devloop project.
// This contains the core identification and location data for a project.
type ProjectInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the project. This can be:
	// - Manually set in devloop.yaml settings.project_id (recommended for AI tools)
	// - Auto-generated from the project directory path (fallback)
	// Examples: "my-backend", "frontend-app", "user-service"
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Absolute path to the project's root directory containing .devloop.yaml
	// This is where all relative paths in commands and file operations are resolved from.
	// Example: "/Users/dev/projects/my-app"
	ProjectRoot   string `protobuf:"bytes,2,opt,name=project_root,json=projectRoot,proto3" json:"project_root,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectInfo) Reset() {
	*x = ProjectInfo{}
	mi := &file_devloop_v1_models_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectInfo) ProtoMessage() {}

func (x *ProjectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_devloop_v1_models_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectInfo.ProtoReflect.Descriptor instead.
func (*ProjectInfo) Descriptor() ([]byte, []int) {
	return file_devloop_v1_models_proto_rawDescGZIP(), []int{0}
}

func (x *ProjectInfo) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectInfo) GetProjectRoot() string {
	if x != nil {
		return x.ProjectRoot
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectId     string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Settings      *Settings              `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	Rules         []*Rule                `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_devloop_v1_models_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_devloop_v1_models_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_devloop_v1_models_proto_rawDescGZIP(), []int{1}
}

func (x *Config) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Config) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Config) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// Settings defines global settings for devloop.
type Settings struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	ProjectId string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Whether to prefix logs with rule name or not
	PrefixLogs bool `protobuf:"varint,2,opt,name=prefix_logs,json=prefixLogs,proto3" json:"prefix_logs,omitempty"`
	// Length of the prefix to format in if prefixing logs.
	PrefixMaxLength uint32 `protobuf:"varint,3,opt,name=prefix_max_length,json=prefixMaxLength,proto3" json:"prefix_max_length,omitempty"`
	// Default debounce delay for all rules if they do not have their own DB delay specified
	DefaultDebounceDelay *uint64 `protobuf:"varint,4,opt,name=default_debounce_delay,json=defaultDebounceDelay,proto3,oneof" json:"default_debounce_delay,omitempty"`
	// Whether to log verbosely or not
	Verbose            bool              `protobuf:"varint,5,opt,name=verbose,proto3" json:"verbose,omitempty"`
	ColorLogs          bool              `protobuf:"varint,6,opt,name=color_logs,json=colorLogs,proto3" json:"color_logs,omitempty"`
	ColorScheme        string            `protobuf:"bytes,7,opt,name=color_scheme,json=colorScheme,proto3" json:"color_scheme,omitempty"`
	CustomColors       map[string]string `protobuf:"bytes,8,rep,name=custom_colors,json=customColors,proto3" json:"custom_colors,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DefaultWatchAction string            `protobuf:"bytes,9,opt,name=default_watch_action,json=defaultWatchAction,proto3" json:"default_watch_action,omitempty"`
	// Cycle detection configuration
	CycleDetection *CycleDetectionSettings `protobuf:"bytes,10,opt,name=cycle_detection,json=cycleDetection,proto3" json:"cycle_detection,omitempty"`
	// Whether to suppress colors from subprocess output (default: false)
	// When true, all subprocess output appears in plain text
	// When false, subprocess tools like npm, go test, etc. can output their native colors
	SuppressSubprocessColors bool `protobuf:"varint,11,opt,name=suppress_subprocess_colors,json=suppressSubprocessColors,proto3" json:"suppress_subprocess_colors,omitempty"`
	// Maximum number of rules that can run in parallel (default: 0 = unlimited)
	// Set to 1 for sequential execution, useful for debugging rule chains
	MaxParallelRules uint32 `protobuf:"varint,12,opt,name=max_parallel_rules,json=maxParallelRules,proto3" json:"max_parallel_rules,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Settings) Reset() {
	*x = Settings{}
	mi := &file_devloop_v1_models_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_devloop_v1_models_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_devloop_v1_models_proto_rawDescGZIP(), []int{2}
}

func (x *Settings) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Settings) GetPrefixLogs() bool {
	if x != nil {
		return x.PrefixLogs
	}
	return false
}

func (x *Settings) GetPrefixMaxLength() uint32 {
	if x != nil {
		return x.PrefixMaxLength
	}
	return 0
}

func (x *Settings) GetDefaultDebounceDelay() uint64 {
	if x != nil && x.DefaultDebounceDelay != nil {
		return *x.DefaultDebounceDelay
	}
	return 0
}

func (x *Settings) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

func (x *Settings) GetColorLogs() bool {
	if x != nil {
		return x.ColorLogs
	}
	return false
}

func (x *Settings) GetColorScheme() string {
	if x != nil {
		return x.ColorScheme
	}
	return ""
}

func (x *Settings) GetCustomColors() map[string]string {
	if x != nil {
		return x.CustomColors
	}
	return nil
}

func (x *Settings) GetDefaultWatchAction() string {
	if x != nil {
		return x.DefaultWatchAction
	}
	return ""
}

func (x *Settings) GetCycleDetection() *CycleDetectionSettings {
	if x != nil {
		return x.CycleDetection
	}
	return nil
}

func (x *Settings) GetSuppressSubprocessColors() bool {
	if x != nil {
		return x.SuppressSubprocessColors
	}
	return false
}

func (x *Settings) GetMaxParallelRules() uint32 {
	if x != nil {
		return x.MaxParallelRules
	}
	return 0
}

// Settings for cycle detection and prevention
type CycleDetectionSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether to enable cycle detection (default: true)
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Whether to perform static validation at startup (default: true)
	StaticValidation bool `protobuf:"varint,2,opt,name=static_validation,json=staticValidation,proto3" json:"static_validation,omitempty"`
	// Whether to enable dynamic rate limiting (default: false for now)
	DynamicProtection bool `protobuf:"varint,3,opt,name=dynamic_protection,json=dynamicProtection,proto3" json:"dynamic_protection,omitempty"`
	// Maximum triggers per minute before rate limiting kicks in (default: 10)
	MaxTriggersPerMinute uint32 `protobuf:"varint,4,opt,name=max_triggers_per_minute,json=maxTriggersPerMinute,proto3" json:"max_triggers_per_minute,omitempty"`
	// Maximum chain depth for trigger relationships (default: 5)
	MaxChainDepth uint32 `protobuf:"varint,5,opt,name=max_chain_depth,json=maxChainDepth,proto3" json:"max_chain_depth,omitempty"`
	// Time window for file modification frequency detection in seconds (default: 60)
	FileThrashWindowSeconds uint32 `protobuf:"varint,6,opt,name=file_thrash_window_seconds,json=fileThrashWindowSeconds,proto3" json:"file_thrash_window_seconds,omitempty"`
	// Number of modifications within window to consider "thrashing" (default: 5)
	FileThrashThreshold uint32 `protobuf:"varint,7,opt,name=file_thrash_threshold,json=fileThrashThreshold,proto3" json:"file_thrash_threshold,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CycleDetectionSettings) Reset() {
	*x = CycleDetectionSettings{}
	mi := &file_devloop_v1_models_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CycleDetectionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleDetectionSettings) ProtoMessage() {}

func (x *CycleDetectionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_devloop_v1_models_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleDetectionSettings.ProtoReflect.Descriptor instead.
func (*CycleDetectionSettings) Descriptor() ([]byte, []int) {
	return file_devloop_v1_models_proto_rawDescGZIP(), []int{3}
}

func (x *CycleDetectionSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CycleDetectionSettings) GetStaticValidation() bool {
	if x != nil {
		return x.StaticValidation
	}
	return false
}

func (x *CycleDetectionSettings) GetDynamicProtection() bool {
	if x != nil {
		return x.DynamicProtection
	}
	return false
}

func (x *CycleDetectionSettings) GetMaxTriggersPerMinute() uint32 {
	if x != nil {
		return x.MaxTriggersPerMinute
	}
	return 0
}

func (x *CycleDetectionSettings) GetMaxChainDepth() uint32 {
	if x != nil {
		return x.MaxChainDepth
	}
	return 0
}

func (x *CycleDetectionSettings) GetFileThrashWindowSeconds() uint32 {
	if x != nil {
		return x.FileThrashWindowSeconds
	}
	return 0
}

func (x *CycleDetectionSettings) GetFileThrashThreshold() uint32 {
	if x != nil {
		return x.FileThrashThreshold
	}
	return 0
}

// LogLine represents a single log entry from a rule execution.
// Used for streaming real-time logs and retrieving historical log data.
type LogLine struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The project that generated this log line
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The specific rule that produced this output (e.g., "backend", "frontend", "tests")
	RuleName string `protobuf:"bytes,2,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	// The actual log content/output line from the command
	// This includes all stdout/stderr from the rule's commands
	Line string `protobuf:"bytes,3,opt,name=line,proto3" json:"line,omitempty"`
	// When this log line was generated (Unix timestamp in milliseconds)
	// Use this for time-based filtering and chronological ordering
	Timestamp     int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogLine) Reset() {
	*x = LogLine{}
	mi := &file_devloop_v1_models_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLine) ProtoMessage() {}

func (x *LogLine) ProtoReflect() protoreflect.Message {
	mi := &file_devloop_v1_models_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLine.ProtoReflect.Descriptor instead.
func (*LogLine) Descriptor() ([]byte, []int) {
	return file_devloop_v1_models_proto_rawDescGZIP(), []int{4}
}

func (x *LogLine) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *LogLine) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *LogLine) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

func (x *LogLine) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Rule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The project this rule belongs to
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The rule name (e.g., "backend", "frontend", "tests")
	// Must match a rule name from the project's .devloop.yaml configuration
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The commands that will be executed for this rule
	Commands []string `protobuf:"bytes,3,rep,name=commands,proto3" json:"commands,omitempty"`
	// The rule matchers and the actions to take for them
	Watch []*RuleMatcher `protobuf:"bytes,4,rep,name=watch,proto3" json:"watch,omitempty"`
	// What to do when a file does not match any pattern by default
	DefaultAction string `protobuf:"bytes,5,opt,name=default_action,json=defaultAction,proto3" json:"default_action,omitempty"`
	// Prefix for this rule
	Prefix string `protobuf:"bytes,6,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// The workdir for this rule.  If not specified then will default to the directory where the devloop config is in.
	WorkDir string `protobuf:"bytes,7,opt,name=work_dir,json=workDir,proto3" json:"work_dir,omitempty"`
	// Whether to skip running on init (default false = will run on init)
	// Set to true to prevent rule from executing when devloop starts up
	// Example: skip_run_on_init: true
	SkipRunOnInit bool `protobuf:"varint,8,opt,name=skip_run_on_init,json=skipRunOnInit,proto3" json:"skip_run_on_init,omitempty"`
	// Whether the rule will have verbose logs or not
	Verbose *bool `protobuf:"varint,9,opt,name=verbose,proto3,oneof" json:"verbose,omitempty"`
	// Delay for debouncing if rules matched multiple times in rapid successession
	DebounceDelay *uint64 `protobuf:"varint,10,opt,name=debounce_delay,json=debounceDelay,proto3,oneof" json:"debounce_delay,omitempty"`
	// Color to use to show the logs for this rule
	Color string            `protobuf:"bytes,11,opt,name=color,proto3" json:"color,omitempty"`
	Env   map[string]string `protobuf:"bytes,12,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Per-rule cycle protection override (if not set, inherits from global settings)
	// Set to false to disable cycle protection for this specific rule
	CycleProtection *bool `protobuf:"varint,13,opt,name=cycle_protection,json=cycleProtection,proto3,oneof" json:"cycle_protection,omitempty"`
	// Status of this rule
	Status *RuleStatus `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// Whether to exit devloop when this rule fails startup (default: false)
	// Set to true to use legacy behavior where devloop exits on startup failure
	ExitOnFailedInit bool `protobuf:"varint,15,opt,name=exit_on_failed_init,json=exitOnFailedInit,proto3" json:"exit_on_failed_init,omitempty"`
	// Maximum number of retry attempts for failed startup (default: 10)
	MaxInitRetries uint32 `protobuf:"varint,16,opt,name=max_init_retries,json=maxInitRetries,proto3" json:"max_init_retries,omitempty"`
	// Base backoff duration in milliseconds for startup retries (default: 3000ms)
	// Grows exponentially: 3s, 6s, 12s, 24s, etc.
	InitRetryBackoffBase uint64 `protobuf:"varint,17,opt,name=init_retry_backoff_base,json=initRetryBackoffBase,proto3" json:"init_retry_backoff_base,omitempty"`
	// Whether this rule represents a long-running operation (default: false)
	// Long-running operations (LRO) like dev servers run indefinitely and are managed differently:
	// - They don't consume worker semaphore slots (unlimited concurrency)
	// - When file changes trigger them, existing processes are killed and restarted
	// - They're marked as RUNNING immediately and never COMPLETED
	// - Examples: "./bin/server", "npm run dev", database containers
	// Set to true for processes that run indefinitely, false for build/test commands
	Lro           bool `protobuf:"varint,18,opt,name=lro,proto3" json:"lro,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Rule) Reset() {
	*x = Rule{}
	mi := &file_devloop_v1_models_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_devloop_v1_models_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_devloop_v1_models_proto_rawDescGZIP(), []int{5}
}

func (x *Rule) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rule) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *Rule) GetWatch() []*RuleMatcher {
	if x != nil {
		return x.Watch
	}
	return nil
}

func (x *Rule) GetDefaultAction() string {
	if x != nil {
		return x.DefaultAction
	}
	return ""
}

func (x *Rule) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Rule) GetWorkDir() string {
	if x != nil {
		return x.WorkDir
	}
	return ""
}

func (x *Rule) GetSkipRunOnInit() bool {
	if x != nil {
		return x.SkipRunOnInit
	}
	return false
}

func (x *Rule) GetVerbose() bool {
	if x != nil && x.Verbose != nil {
		return *x.Verbose
	}
	return false
}

func (x *Rule) GetDebounceDelay() uint64 {
	if x != nil && x.DebounceDelay != nil {
		return *x.DebounceDelay
	}
	return 0
}

func (x *Rule) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Rule) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Rule) GetCycleProtection() bool {
	if x != nil && x.CycleProtection != nil {
		return *x.CycleProtection
	}
	return false
}

func (x *Rule) GetStatus() *RuleStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Rule) GetExitOnFailedInit() bool {
	if x != nil {
		return x.ExitOnFailedInit
	}
	return false
}

func (x *Rule) GetMaxInitRetries() uint32 {
	if x != nil {
		return x.MaxInitRetries
	}
	return 0
}

func (x *Rule) GetInitRetryBackoffBase() uint64 {
	if x != nil {
		return x.InitRetryBackoffBase
	}
	return 0
}

func (x *Rule) GetLro() bool {
	if x != nil {
		return x.Lro
	}
	return false
}

type RuleMatcher struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Patterns to match this rule for
	Patterns []string `protobuf:"bytes,1,rep,name=patterns,proto3" json:"patterns,omitempty"`
	// Action to take when rule matches - currently "include" | "exclude"
	Action        string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuleMatcher) Reset() {
	*x = RuleMatcher{}
	mi := &file_devloop_v1_models_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleMatcher) ProtoMessage() {}

func (x *RuleMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_devloop_v1_models_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleMatcher.ProtoReflect.Descriptor instead.
func (*RuleMatcher) Descriptor() ([]byte, []int) {
	return file_devloop_v1_models_proto_rawDescGZIP(), []int{6}
}

func (x *RuleMatcher) GetPatterns() []string {
	if x != nil {
		return x.Patterns
	}
	return nil
}

func (x *RuleMatcher) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// RuleStatus represents the current execution status and history of a rule.
// Use this to monitor build/test progress and check for failures.
type RuleStatus struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	ProjectId string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RuleName  string                 `protobuf:"bytes,2,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	// Whether the rule is currently executing commands
	// true = commands are running, false = rule is idle
	IsRunning bool `protobuf:"varint,3,opt,name=is_running,json=isRunning,proto3" json:"is_running,omitempty"`
	// When the current execution started (Unix timestamp in milliseconds)
	// Only meaningful when is_running = true
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// When the last execution completed (Unix timestamp in milliseconds)
	// Use this to check how recently a rule was executed
	LastBuildTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_build_time,json=lastBuildTime,proto3" json:"last_build_time,omitempty"`
	// Result of the last execution. Possible values:
	// - "SUCCESS": All commands completed successfully (exit code 0)
	// - "FAILED": One or more commands failed (non-zero exit code)
	// - "RUNNING": Rule is currently executing
	// - "IDLE": Rule has not been executed yet
	LastBuildStatus string `protobuf:"bytes,6,opt,name=last_build_status,json=lastBuildStatus,proto3" json:"last_build_status,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RuleStatus) Reset() {
	*x = RuleStatus{}
	mi := &file_devloop_v1_models_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleStatus) ProtoMessage() {}

func (x *RuleStatus) ProtoReflect() protoreflect.Message {
	mi := &file_devloop_v1_models_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleStatus.ProtoReflect.Descriptor instead.
func (*RuleStatus) Descriptor() ([]byte, []int) {
	return file_devloop_v1_models_proto_rawDescGZIP(), []int{7}
}

func (x *RuleStatus) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *RuleStatus) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *RuleStatus) GetIsRunning() bool {
	if x != nil {
		return x.IsRunning
	}
	return false
}

func (x *RuleStatus) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *RuleStatus) GetLastBuildTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastBuildTime
	}
	return nil
}

func (x *RuleStatus) GetLastBuildStatus() string {
	if x != nil {
		return x.LastBuildStatus
	}
	return ""
}

var File_devloop_v1_models_proto protoreflect.FileDescriptor

const file_devloop_v1_models_proto_rawDesc = "" +
	"\n" +
	"\x17devloop/v1/models.proto\x12\n" +
	"devloop.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x15google/api/http.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x18mcp/v1/annotations.proto\"O\n" +
	"\vProjectInfo\x12\x1d\n" +
	"\n" +
	"project_id\x18\x01 \x01(\tR\tprojectId\x12!\n" +
	"\fproject_root\x18\x02 \x01(\tR\vprojectRoot\"\x81\x01\n" +
	"\x06Config\x12\x1d\n" +
	"\n" +
	"project_id\x18\x01 \x01(\tR\tprojectId\x120\n" +
	"\bsettings\x18\x02 \x01(\v2\x14.devloop.v1.SettingsR\bsettings\x12&\n" +
	"\x05rules\x18\x03 \x03(\v2\x10.devloop.v1.RuleR\x05rules\"\xa1\x05\n" +
	"\bSettings\x12\x1d\n" +
	"\n" +
	"project_id\x18\x01 \x01(\tR\tprojectId\x12\x1f\n" +
	"\vprefix_logs\x18\x02 \x01(\bR\n" +
	"prefixLogs\x12*\n" +
	"\x11prefix_max_length\x18\x03 \x01(\rR\x0fprefixMaxLength\x129\n" +
	"\x16default_debounce_delay\x18\x04 \x01(\x04H\x00R\x14defaultDebounceDelay\x88\x01\x01\x12\x18\n" +
	"\averbose\x18\x05 \x01(\bR\averbose\x12\x1d\n" +
	"\n" +
	"color_logs\x18\x06 \x01(\bR\tcolorLogs\x12!\n" +
	"\fcolor_scheme\x18\a \x01(\tR\vcolorScheme\x12K\n" +
	"\rcustom_colors\x18\b \x03(\v2&.devloop.v1.Settings.CustomColorsEntryR\fcustomColors\x120\n" +
	"\x14default_watch_action\x18\t \x01(\tR\x12defaultWatchAction\x12K\n" +
	"\x0fcycle_detection\x18\n" +
	" \x01(\v2\".devloop.v1.CycleDetectionSettingsR\x0ecycleDetection\x12<\n" +
	"\x1asuppress_subprocess_colors\x18\v \x01(\bR\x18suppressSubprocessColors\x12,\n" +
	"\x12max_parallel_rules\x18\f \x01(\rR\x10maxParallelRules\x1a?\n" +
	"\x11CustomColorsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x19\n" +
	"\x17_default_debounce_delay\"\xde\x02\n" +
	"\x16CycleDetectionSettings\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12+\n" +
	"\x11static_validation\x18\x02 \x01(\bR\x10staticValidation\x12-\n" +
	"\x12dynamic_protection\x18\x03 \x01(\bR\x11dynamicProtection\x125\n" +
	"\x17max_triggers_per_minute\x18\x04 \x01(\rR\x14maxTriggersPerMinute\x12&\n" +
	"\x0fmax_chain_depth\x18\x05 \x01(\rR\rmaxChainDepth\x12;\n" +
	"\x1afile_thrash_window_seconds\x18\x06 \x01(\rR\x17fileThrashWindowSeconds\x122\n" +
	"\x15file_thrash_threshold\x18\a \x01(\rR\x13fileThrashThreshold\"w\n" +
	"\aLogLine\x12\x1d\n" +
	"\n" +
	"project_id\x18\x01 \x01(\tR\tprojectId\x12\x1b\n" +
	"\trule_name\x18\x02 \x01(\tR\bruleName\x12\x12\n" +
	"\x04line\x18\x03 \x01(\tR\x04line\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\"\x83\x06\n" +
	"\x04Rule\x12\x1d\n" +
	"\n" +
	"project_id\x18\x01 \x01(\tR\tprojectId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\bcommands\x18\x03 \x03(\tR\bcommands\x12-\n" +
	"\x05watch\x18\x04 \x03(\v2\x17.devloop.v1.RuleMatcherR\x05watch\x12%\n" +
	"\x0edefault_action\x18\x05 \x01(\tR\rdefaultAction\x12\x16\n" +
	"\x06prefix\x18\x06 \x01(\tR\x06prefix\x12\x19\n" +
	"\bwork_dir\x18\a \x01(\tR\aworkDir\x12'\n" +
	"\x10skip_run_on_init\x18\b \x01(\bR\rskipRunOnInit\x12\x1d\n" +
	"\averbose\x18\t \x01(\bH\x00R\averbose\x88\x01\x01\x12*\n" +
	"\x0edebounce_delay\x18\n" +
	" \x01(\x04H\x01R\rdebounceDelay\x88\x01\x01\x12\x14\n" +
	"\x05color\x18\v \x01(\tR\x05color\x12+\n" +
	"\x03env\x18\f \x03(\v2\x19.devloop.v1.Rule.EnvEntryR\x03env\x12.\n" +
	"\x10cycle_protection\x18\r \x01(\bH\x02R\x0fcycleProtection\x88\x01\x01\x12.\n" +
	"\x06status\x18\x0e \x01(\v2\x16.devloop.v1.RuleStatusR\x06status\x12-\n" +
	"\x13exit_on_failed_init\x18\x0f \x01(\bR\x10exitOnFailedInit\x12(\n" +
	"\x10max_init_retries\x18\x10 \x01(\rR\x0emaxInitRetries\x125\n" +
	"\x17init_retry_backoff_base\x18\x11 \x01(\x04R\x14initRetryBackoffBase\x12\x10\n" +
	"\x03lro\x18\x12 \x01(\bR\x03lro\x1a6\n" +
	"\bEnvEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\n" +
	"\n" +
	"\b_verboseB\x11\n" +
	"\x0f_debounce_delayB\x13\n" +
	"\x11_cycle_protection\"A\n" +
	"\vRuleMatcher\x12\x1a\n" +
	"\bpatterns\x18\x01 \x03(\tR\bpatterns\x12\x16\n" +
	"\x06action\x18\x02 \x01(\tR\x06action\"\x92\x02\n" +
	"\n" +
	"RuleStatus\x12\x1d\n" +
	"\n" +
	"project_id\x18\x01 \x01(\tR\tprojectId\x12\x1b\n" +
	"\trule_name\x18\x02 \x01(\tR\bruleName\x12\x1d\n" +
	"\n" +
	"is_running\x18\x03 \x01(\bR\tisRunning\x129\n" +
	"\n" +
	"start_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x12B\n" +
	"\x0flast_build_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\rlastBuildTime\x12*\n" +
	"\x11last_build_status\x18\x06 \x01(\tR\x0flastBuildStatusB\x93\x01\n" +
	"\x0ecom.devloop.v1B\vModelsProtoP\x01Z+github.com/panyam/devloop/gen/go/devloop/v1\xa2\x02\x03DXX\xaa\x02\n" +
	"Devloop.V1\xca\x02\n" +
	"Devloop\\V1\xe2\x02\x16Devloop\\V1\\GPBMetadata\xea\x02\vDevloop::V1b\x06proto3"

var (
	file_devloop_v1_models_proto_rawDescOnce sync.Once
	file_devloop_v1_models_proto_rawDescData []byte
)

func file_devloop_v1_models_proto_rawDescGZIP() []byte {
	file_devloop_v1_models_proto_rawDescOnce.Do(func() {
		file_devloop_v1_models_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_devloop_v1_models_proto_rawDesc), len(file_devloop_v1_models_proto_rawDesc)))
	})
	return file_devloop_v1_models_proto_rawDescData
}

var file_devloop_v1_models_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_devloop_v1_models_proto_goTypes = []any{
	(*ProjectInfo)(nil),            // 0: devloop.v1.ProjectInfo
	(*Config)(nil),                 // 1: devloop.v1.Config
	(*Settings)(nil),               // 2: devloop.v1.Settings
	(*CycleDetectionSettings)(nil), // 3: devloop.v1.CycleDetectionSettings
	(*LogLine)(nil),                // 4: devloop.v1.LogLine
	(*Rule)(nil),                   // 5: devloop.v1.Rule
	(*RuleMatcher)(nil),            // 6: devloop.v1.RuleMatcher
	(*RuleStatus)(nil),             // 7: devloop.v1.RuleStatus
	nil,                            // 8: devloop.v1.Settings.CustomColorsEntry
	nil,                            // 9: devloop.v1.Rule.EnvEntry
	(*timestamppb.Timestamp)(nil),  // 10: google.protobuf.Timestamp
}
var file_devloop_v1_models_proto_depIdxs = []int32{
	2,  // 0: devloop.v1.Config.settings:type_name -> devloop.v1.Settings
	5,  // 1: devloop.v1.Config.rules:type_name -> devloop.v1.Rule
	8,  // 2: devloop.v1.Settings.custom_colors:type_name -> devloop.v1.Settings.CustomColorsEntry
	3,  // 3: devloop.v1.Settings.cycle_detection:type_name -> devloop.v1.CycleDetectionSettings
	6,  // 4: devloop.v1.Rule.watch:type_name -> devloop.v1.RuleMatcher
	9,  // 5: devloop.v1.Rule.env:type_name -> devloop.v1.Rule.EnvEntry
	7,  // 6: devloop.v1.Rule.status:type_name -> devloop.v1.RuleStatus
	10, // 7: devloop.v1.RuleStatus.start_time:type_name -> google.protobuf.Timestamp
	10, // 8: devloop.v1.RuleStatus.last_build_time:type_name -> google.protobuf.Timestamp
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_devloop_v1_models_proto_init() }
func file_devloop_v1_models_proto_init() {
	if File_devloop_v1_models_proto != nil {
		return
	}
	file_devloop_v1_models_proto_msgTypes[2].OneofWrappers = []any{}
	file_devloop_v1_models_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_devloop_v1_models_proto_rawDesc), len(file_devloop_v1_models_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_devloop_v1_models_proto_goTypes,
		DependencyIndexes: file_devloop_v1_models_proto_depIdxs,
		MessageInfos:      file_devloop_v1_models_proto_msgTypes,
	}.Build()
	File_devloop_v1_models_proto = out.File
	file_devloop_v1_models_proto_goTypes = nil
	file_devloop_v1_models_proto_depIdxs = nil
}
