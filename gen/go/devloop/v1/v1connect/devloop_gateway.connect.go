// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: devloop/v1/devloop_gateway.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "devloop/protos/devloop/v1"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DevloopGatewayServiceName is the fully-qualified name of the DevloopGatewayService service.
	DevloopGatewayServiceName = "devloop_gateway.v1.DevloopGatewayService"
	// GatewayClientServiceName is the fully-qualified name of the GatewayClientService service.
	GatewayClientServiceName = "devloop_gateway.v1.GatewayClientService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DevloopGatewayServiceRegisterProcedure is the fully-qualified name of the DevloopGatewayService's
	// Register RPC.
	DevloopGatewayServiceRegisterProcedure = "/devloop_gateway.v1.DevloopGatewayService/Register"
	// DevloopGatewayServiceUnregisterProcedure is the fully-qualified name of the
	// DevloopGatewayService's Unregister RPC.
	DevloopGatewayServiceUnregisterProcedure = "/devloop_gateway.v1.DevloopGatewayService/Unregister"
	// DevloopGatewayServiceStreamLogsProcedure is the fully-qualified name of the
	// DevloopGatewayService's StreamLogs RPC.
	DevloopGatewayServiceStreamLogsProcedure = "/devloop_gateway.v1.DevloopGatewayService/StreamLogs"
	// DevloopGatewayServiceUpdateRuleStatusProcedure is the fully-qualified name of the
	// DevloopGatewayService's UpdateRuleStatus RPC.
	DevloopGatewayServiceUpdateRuleStatusProcedure = "/devloop_gateway.v1.DevloopGatewayService/UpdateRuleStatus"
	// DevloopGatewayServiceTriggerRuleProcedure is the fully-qualified name of the
	// DevloopGatewayService's TriggerRule RPC.
	DevloopGatewayServiceTriggerRuleProcedure = "/devloop_gateway.v1.DevloopGatewayService/TriggerRule"
	// DevloopGatewayServiceGetHistoricalLogsProcedure is the fully-qualified name of the
	// DevloopGatewayService's GetHistoricalLogs RPC.
	DevloopGatewayServiceGetHistoricalLogsProcedure = "/devloop_gateway.v1.DevloopGatewayService/GetHistoricalLogs"
	// GatewayClientServiceListProjectsProcedure is the fully-qualified name of the
	// GatewayClientService's ListProjects RPC.
	GatewayClientServiceListProjectsProcedure = "/devloop_gateway.v1.GatewayClientService/ListProjects"
	// GatewayClientServiceGetConfigProcedure is the fully-qualified name of the GatewayClientService's
	// GetConfig RPC.
	GatewayClientServiceGetConfigProcedure = "/devloop_gateway.v1.GatewayClientService/GetConfig"
	// GatewayClientServiceGetRuleStatusProcedure is the fully-qualified name of the
	// GatewayClientService's GetRuleStatus RPC.
	GatewayClientServiceGetRuleStatusProcedure = "/devloop_gateway.v1.GatewayClientService/GetRuleStatus"
	// GatewayClientServiceTriggerRuleClientProcedure is the fully-qualified name of the
	// GatewayClientService's TriggerRuleClient RPC.
	GatewayClientServiceTriggerRuleClientProcedure = "/devloop_gateway.v1.GatewayClientService/TriggerRuleClient"
	// GatewayClientServiceListWatchedPathsProcedure is the fully-qualified name of the
	// GatewayClientService's ListWatchedPaths RPC.
	GatewayClientServiceListWatchedPathsProcedure = "/devloop_gateway.v1.GatewayClientService/ListWatchedPaths"
	// GatewayClientServiceReadFileContentProcedure is the fully-qualified name of the
	// GatewayClientService's ReadFileContent RPC.
	GatewayClientServiceReadFileContentProcedure = "/devloop_gateway.v1.GatewayClientService/ReadFileContent"
	// GatewayClientServiceStreamLogsClientProcedure is the fully-qualified name of the
	// GatewayClientService's StreamLogsClient RPC.
	GatewayClientServiceStreamLogsClientProcedure = "/devloop_gateway.v1.GatewayClientService/StreamLogsClient"
	// GatewayClientServiceGetHistoricalLogsClientProcedure is the fully-qualified name of the
	// GatewayClientService's GetHistoricalLogsClient RPC.
	GatewayClientServiceGetHistoricalLogsClientProcedure = "/devloop_gateway.v1.GatewayClientService/GetHistoricalLogsClient"
)

// DevloopGatewayServiceClient is a client for the devloop_gateway.v1.DevloopGatewayService service.
type DevloopGatewayServiceClient interface {
	// Register a devloop instance with the gateway.
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	// Unregister a devloop instance from the gateway.
	Unregister(context.Context, *connect.Request[v1.UnregisterRequest]) (*connect.Response[v1.UnregisterResponse], error)
	// Stream real-time logs from devloop to the gateway.
	StreamLogs(context.Context) *connect.BidiStreamForClient[v1.StreamLogsRequest, v1.StreamLogsResponse]
	// Update the status of a rule from devloop to the gateway.
	UpdateRuleStatus(context.Context, *connect.Request[v1.UpdateRuleStatusRequest]) (*connect.Response[v1.UpdateRuleStatusResponse], error)
	// Trigger a rule on a devloop instance from the gateway.
	TriggerRule(context.Context, *connect.Request[v1.TriggerRuleRequest]) (*connect.Response[v1.TriggerRuleResponse], error)
	// Get historical logs from a devloop instance.
	GetHistoricalLogs(context.Context, *connect.Request[v1.GetHistoricalLogsRequest]) (*connect.ServerStreamForClient[v1.LogLine], error)
}

// NewDevloopGatewayServiceClient constructs a client for the
// devloop_gateway.v1.DevloopGatewayService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDevloopGatewayServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DevloopGatewayServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	devloopGatewayServiceMethods := v1.File_devloop_v1_devloop_gateway_proto.Services().ByName("DevloopGatewayService").Methods()
	return &devloopGatewayServiceClient{
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+DevloopGatewayServiceRegisterProcedure,
			connect.WithSchema(devloopGatewayServiceMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
		unregister: connect.NewClient[v1.UnregisterRequest, v1.UnregisterResponse](
			httpClient,
			baseURL+DevloopGatewayServiceUnregisterProcedure,
			connect.WithSchema(devloopGatewayServiceMethods.ByName("Unregister")),
			connect.WithClientOptions(opts...),
		),
		streamLogs: connect.NewClient[v1.StreamLogsRequest, v1.StreamLogsResponse](
			httpClient,
			baseURL+DevloopGatewayServiceStreamLogsProcedure,
			connect.WithSchema(devloopGatewayServiceMethods.ByName("StreamLogs")),
			connect.WithClientOptions(opts...),
		),
		updateRuleStatus: connect.NewClient[v1.UpdateRuleStatusRequest, v1.UpdateRuleStatusResponse](
			httpClient,
			baseURL+DevloopGatewayServiceUpdateRuleStatusProcedure,
			connect.WithSchema(devloopGatewayServiceMethods.ByName("UpdateRuleStatus")),
			connect.WithClientOptions(opts...),
		),
		triggerRule: connect.NewClient[v1.TriggerRuleRequest, v1.TriggerRuleResponse](
			httpClient,
			baseURL+DevloopGatewayServiceTriggerRuleProcedure,
			connect.WithSchema(devloopGatewayServiceMethods.ByName("TriggerRule")),
			connect.WithClientOptions(opts...),
		),
		getHistoricalLogs: connect.NewClient[v1.GetHistoricalLogsRequest, v1.LogLine](
			httpClient,
			baseURL+DevloopGatewayServiceGetHistoricalLogsProcedure,
			connect.WithSchema(devloopGatewayServiceMethods.ByName("GetHistoricalLogs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// devloopGatewayServiceClient implements DevloopGatewayServiceClient.
type devloopGatewayServiceClient struct {
	register          *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	unregister        *connect.Client[v1.UnregisterRequest, v1.UnregisterResponse]
	streamLogs        *connect.Client[v1.StreamLogsRequest, v1.StreamLogsResponse]
	updateRuleStatus  *connect.Client[v1.UpdateRuleStatusRequest, v1.UpdateRuleStatusResponse]
	triggerRule       *connect.Client[v1.TriggerRuleRequest, v1.TriggerRuleResponse]
	getHistoricalLogs *connect.Client[v1.GetHistoricalLogsRequest, v1.LogLine]
}

// Register calls devloop_gateway.v1.DevloopGatewayService.Register.
func (c *devloopGatewayServiceClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Unregister calls devloop_gateway.v1.DevloopGatewayService.Unregister.
func (c *devloopGatewayServiceClient) Unregister(ctx context.Context, req *connect.Request[v1.UnregisterRequest]) (*connect.Response[v1.UnregisterResponse], error) {
	return c.unregister.CallUnary(ctx, req)
}

// StreamLogs calls devloop_gateway.v1.DevloopGatewayService.StreamLogs.
func (c *devloopGatewayServiceClient) StreamLogs(ctx context.Context) *connect.BidiStreamForClient[v1.StreamLogsRequest, v1.StreamLogsResponse] {
	return c.streamLogs.CallBidiStream(ctx)
}

// UpdateRuleStatus calls devloop_gateway.v1.DevloopGatewayService.UpdateRuleStatus.
func (c *devloopGatewayServiceClient) UpdateRuleStatus(ctx context.Context, req *connect.Request[v1.UpdateRuleStatusRequest]) (*connect.Response[v1.UpdateRuleStatusResponse], error) {
	return c.updateRuleStatus.CallUnary(ctx, req)
}

// TriggerRule calls devloop_gateway.v1.DevloopGatewayService.TriggerRule.
func (c *devloopGatewayServiceClient) TriggerRule(ctx context.Context, req *connect.Request[v1.TriggerRuleRequest]) (*connect.Response[v1.TriggerRuleResponse], error) {
	return c.triggerRule.CallUnary(ctx, req)
}

// GetHistoricalLogs calls devloop_gateway.v1.DevloopGatewayService.GetHistoricalLogs.
func (c *devloopGatewayServiceClient) GetHistoricalLogs(ctx context.Context, req *connect.Request[v1.GetHistoricalLogsRequest]) (*connect.ServerStreamForClient[v1.LogLine], error) {
	return c.getHistoricalLogs.CallServerStream(ctx, req)
}

// DevloopGatewayServiceHandler is an implementation of the devloop_gateway.v1.DevloopGatewayService
// service.
type DevloopGatewayServiceHandler interface {
	// Register a devloop instance with the gateway.
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	// Unregister a devloop instance from the gateway.
	Unregister(context.Context, *connect.Request[v1.UnregisterRequest]) (*connect.Response[v1.UnregisterResponse], error)
	// Stream real-time logs from devloop to the gateway.
	StreamLogs(context.Context, *connect.BidiStream[v1.StreamLogsRequest, v1.StreamLogsResponse]) error
	// Update the status of a rule from devloop to the gateway.
	UpdateRuleStatus(context.Context, *connect.Request[v1.UpdateRuleStatusRequest]) (*connect.Response[v1.UpdateRuleStatusResponse], error)
	// Trigger a rule on a devloop instance from the gateway.
	TriggerRule(context.Context, *connect.Request[v1.TriggerRuleRequest]) (*connect.Response[v1.TriggerRuleResponse], error)
	// Get historical logs from a devloop instance.
	GetHistoricalLogs(context.Context, *connect.Request[v1.GetHistoricalLogsRequest], *connect.ServerStream[v1.LogLine]) error
}

// NewDevloopGatewayServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDevloopGatewayServiceHandler(svc DevloopGatewayServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	devloopGatewayServiceMethods := v1.File_devloop_v1_devloop_gateway_proto.Services().ByName("DevloopGatewayService").Methods()
	devloopGatewayServiceRegisterHandler := connect.NewUnaryHandler(
		DevloopGatewayServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(devloopGatewayServiceMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	devloopGatewayServiceUnregisterHandler := connect.NewUnaryHandler(
		DevloopGatewayServiceUnregisterProcedure,
		svc.Unregister,
		connect.WithSchema(devloopGatewayServiceMethods.ByName("Unregister")),
		connect.WithHandlerOptions(opts...),
	)
	devloopGatewayServiceStreamLogsHandler := connect.NewBidiStreamHandler(
		DevloopGatewayServiceStreamLogsProcedure,
		svc.StreamLogs,
		connect.WithSchema(devloopGatewayServiceMethods.ByName("StreamLogs")),
		connect.WithHandlerOptions(opts...),
	)
	devloopGatewayServiceUpdateRuleStatusHandler := connect.NewUnaryHandler(
		DevloopGatewayServiceUpdateRuleStatusProcedure,
		svc.UpdateRuleStatus,
		connect.WithSchema(devloopGatewayServiceMethods.ByName("UpdateRuleStatus")),
		connect.WithHandlerOptions(opts...),
	)
	devloopGatewayServiceTriggerRuleHandler := connect.NewUnaryHandler(
		DevloopGatewayServiceTriggerRuleProcedure,
		svc.TriggerRule,
		connect.WithSchema(devloopGatewayServiceMethods.ByName("TriggerRule")),
		connect.WithHandlerOptions(opts...),
	)
	devloopGatewayServiceGetHistoricalLogsHandler := connect.NewServerStreamHandler(
		DevloopGatewayServiceGetHistoricalLogsProcedure,
		svc.GetHistoricalLogs,
		connect.WithSchema(devloopGatewayServiceMethods.ByName("GetHistoricalLogs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/devloop_gateway.v1.DevloopGatewayService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DevloopGatewayServiceRegisterProcedure:
			devloopGatewayServiceRegisterHandler.ServeHTTP(w, r)
		case DevloopGatewayServiceUnregisterProcedure:
			devloopGatewayServiceUnregisterHandler.ServeHTTP(w, r)
		case DevloopGatewayServiceStreamLogsProcedure:
			devloopGatewayServiceStreamLogsHandler.ServeHTTP(w, r)
		case DevloopGatewayServiceUpdateRuleStatusProcedure:
			devloopGatewayServiceUpdateRuleStatusHandler.ServeHTTP(w, r)
		case DevloopGatewayServiceTriggerRuleProcedure:
			devloopGatewayServiceTriggerRuleHandler.ServeHTTP(w, r)
		case DevloopGatewayServiceGetHistoricalLogsProcedure:
			devloopGatewayServiceGetHistoricalLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDevloopGatewayServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDevloopGatewayServiceHandler struct{}

func (UnimplementedDevloopGatewayServiceHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.DevloopGatewayService.Register is not implemented"))
}

func (UnimplementedDevloopGatewayServiceHandler) Unregister(context.Context, *connect.Request[v1.UnregisterRequest]) (*connect.Response[v1.UnregisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.DevloopGatewayService.Unregister is not implemented"))
}

func (UnimplementedDevloopGatewayServiceHandler) StreamLogs(context.Context, *connect.BidiStream[v1.StreamLogsRequest, v1.StreamLogsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.DevloopGatewayService.StreamLogs is not implemented"))
}

func (UnimplementedDevloopGatewayServiceHandler) UpdateRuleStatus(context.Context, *connect.Request[v1.UpdateRuleStatusRequest]) (*connect.Response[v1.UpdateRuleStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.DevloopGatewayService.UpdateRuleStatus is not implemented"))
}

func (UnimplementedDevloopGatewayServiceHandler) TriggerRule(context.Context, *connect.Request[v1.TriggerRuleRequest]) (*connect.Response[v1.TriggerRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.DevloopGatewayService.TriggerRule is not implemented"))
}

func (UnimplementedDevloopGatewayServiceHandler) GetHistoricalLogs(context.Context, *connect.Request[v1.GetHistoricalLogsRequest], *connect.ServerStream[v1.LogLine]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.DevloopGatewayService.GetHistoricalLogs is not implemented"))
}

// GatewayClientServiceClient is a client for the devloop_gateway.v1.GatewayClientService service.
type GatewayClientServiceClient interface {
	// List all registered devloop projects.
	ListProjects(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListProjectsResponse], error)
	// Get the configuration for a specific devloop project.
	GetConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error)
	// Get the detailed status of a specific rule within a project.
	GetRuleStatus(context.Context, *connect.Request[v1.GetRuleStatusRequest]) (*connect.Response[v1.GetRuleStatusResponse], error)
	// Manually trigger a specific rule in a devloop project.
	TriggerRuleClient(context.Context, *connect.Request[v1.TriggerRuleClientRequest]) (*connect.Response[v1.TriggerRuleClientResponse], error)
	// List all glob patterns being watched by a specific devloop project.
	ListWatchedPaths(context.Context, *connect.Request[v1.ListWatchedPathsRequest]) (*connect.Response[v1.ListWatchedPathsResponse], error)
	// Read and return the content of a specific file within a devloop project.
	ReadFileContent(context.Context, *connect.Request[v1.ReadFileContentRequest]) (*connect.Response[v1.ReadFileContentResponse], error)
	// Stream real-time logs for a specific rule in a project.
	StreamLogsClient(context.Context, *connect.Request[v1.StreamLogsClientRequest]) (*connect.ServerStreamForClient[v1.LogLine], error)
	// Retrieve historical logs for a specific rule, with optional time filtering.
	GetHistoricalLogsClient(context.Context, *connect.Request[v1.GetHistoricalLogsClientRequest]) (*connect.ServerStreamForClient[v1.LogLine], error)
}

// NewGatewayClientServiceClient constructs a client for the devloop_gateway.v1.GatewayClientService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGatewayClientServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GatewayClientServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gatewayClientServiceMethods := v1.File_devloop_v1_devloop_gateway_proto.Services().ByName("GatewayClientService").Methods()
	return &gatewayClientServiceClient{
		listProjects: connect.NewClient[emptypb.Empty, v1.ListProjectsResponse](
			httpClient,
			baseURL+GatewayClientServiceListProjectsProcedure,
			connect.WithSchema(gatewayClientServiceMethods.ByName("ListProjects")),
			connect.WithClientOptions(opts...),
		),
		getConfig: connect.NewClient[v1.GetConfigRequest, v1.GetConfigResponse](
			httpClient,
			baseURL+GatewayClientServiceGetConfigProcedure,
			connect.WithSchema(gatewayClientServiceMethods.ByName("GetConfig")),
			connect.WithClientOptions(opts...),
		),
		getRuleStatus: connect.NewClient[v1.GetRuleStatusRequest, v1.GetRuleStatusResponse](
			httpClient,
			baseURL+GatewayClientServiceGetRuleStatusProcedure,
			connect.WithSchema(gatewayClientServiceMethods.ByName("GetRuleStatus")),
			connect.WithClientOptions(opts...),
		),
		triggerRuleClient: connect.NewClient[v1.TriggerRuleClientRequest, v1.TriggerRuleClientResponse](
			httpClient,
			baseURL+GatewayClientServiceTriggerRuleClientProcedure,
			connect.WithSchema(gatewayClientServiceMethods.ByName("TriggerRuleClient")),
			connect.WithClientOptions(opts...),
		),
		listWatchedPaths: connect.NewClient[v1.ListWatchedPathsRequest, v1.ListWatchedPathsResponse](
			httpClient,
			baseURL+GatewayClientServiceListWatchedPathsProcedure,
			connect.WithSchema(gatewayClientServiceMethods.ByName("ListWatchedPaths")),
			connect.WithClientOptions(opts...),
		),
		readFileContent: connect.NewClient[v1.ReadFileContentRequest, v1.ReadFileContentResponse](
			httpClient,
			baseURL+GatewayClientServiceReadFileContentProcedure,
			connect.WithSchema(gatewayClientServiceMethods.ByName("ReadFileContent")),
			connect.WithClientOptions(opts...),
		),
		streamLogsClient: connect.NewClient[v1.StreamLogsClientRequest, v1.LogLine](
			httpClient,
			baseURL+GatewayClientServiceStreamLogsClientProcedure,
			connect.WithSchema(gatewayClientServiceMethods.ByName("StreamLogsClient")),
			connect.WithClientOptions(opts...),
		),
		getHistoricalLogsClient: connect.NewClient[v1.GetHistoricalLogsClientRequest, v1.LogLine](
			httpClient,
			baseURL+GatewayClientServiceGetHistoricalLogsClientProcedure,
			connect.WithSchema(gatewayClientServiceMethods.ByName("GetHistoricalLogsClient")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gatewayClientServiceClient implements GatewayClientServiceClient.
type gatewayClientServiceClient struct {
	listProjects            *connect.Client[emptypb.Empty, v1.ListProjectsResponse]
	getConfig               *connect.Client[v1.GetConfigRequest, v1.GetConfigResponse]
	getRuleStatus           *connect.Client[v1.GetRuleStatusRequest, v1.GetRuleStatusResponse]
	triggerRuleClient       *connect.Client[v1.TriggerRuleClientRequest, v1.TriggerRuleClientResponse]
	listWatchedPaths        *connect.Client[v1.ListWatchedPathsRequest, v1.ListWatchedPathsResponse]
	readFileContent         *connect.Client[v1.ReadFileContentRequest, v1.ReadFileContentResponse]
	streamLogsClient        *connect.Client[v1.StreamLogsClientRequest, v1.LogLine]
	getHistoricalLogsClient *connect.Client[v1.GetHistoricalLogsClientRequest, v1.LogLine]
}

// ListProjects calls devloop_gateway.v1.GatewayClientService.ListProjects.
func (c *gatewayClientServiceClient) ListProjects(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// GetConfig calls devloop_gateway.v1.GatewayClientService.GetConfig.
func (c *gatewayClientServiceClient) GetConfig(ctx context.Context, req *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error) {
	return c.getConfig.CallUnary(ctx, req)
}

// GetRuleStatus calls devloop_gateway.v1.GatewayClientService.GetRuleStatus.
func (c *gatewayClientServiceClient) GetRuleStatus(ctx context.Context, req *connect.Request[v1.GetRuleStatusRequest]) (*connect.Response[v1.GetRuleStatusResponse], error) {
	return c.getRuleStatus.CallUnary(ctx, req)
}

// TriggerRuleClient calls devloop_gateway.v1.GatewayClientService.TriggerRuleClient.
func (c *gatewayClientServiceClient) TriggerRuleClient(ctx context.Context, req *connect.Request[v1.TriggerRuleClientRequest]) (*connect.Response[v1.TriggerRuleClientResponse], error) {
	return c.triggerRuleClient.CallUnary(ctx, req)
}

// ListWatchedPaths calls devloop_gateway.v1.GatewayClientService.ListWatchedPaths.
func (c *gatewayClientServiceClient) ListWatchedPaths(ctx context.Context, req *connect.Request[v1.ListWatchedPathsRequest]) (*connect.Response[v1.ListWatchedPathsResponse], error) {
	return c.listWatchedPaths.CallUnary(ctx, req)
}

// ReadFileContent calls devloop_gateway.v1.GatewayClientService.ReadFileContent.
func (c *gatewayClientServiceClient) ReadFileContent(ctx context.Context, req *connect.Request[v1.ReadFileContentRequest]) (*connect.Response[v1.ReadFileContentResponse], error) {
	return c.readFileContent.CallUnary(ctx, req)
}

// StreamLogsClient calls devloop_gateway.v1.GatewayClientService.StreamLogsClient.
func (c *gatewayClientServiceClient) StreamLogsClient(ctx context.Context, req *connect.Request[v1.StreamLogsClientRequest]) (*connect.ServerStreamForClient[v1.LogLine], error) {
	return c.streamLogsClient.CallServerStream(ctx, req)
}

// GetHistoricalLogsClient calls devloop_gateway.v1.GatewayClientService.GetHistoricalLogsClient.
func (c *gatewayClientServiceClient) GetHistoricalLogsClient(ctx context.Context, req *connect.Request[v1.GetHistoricalLogsClientRequest]) (*connect.ServerStreamForClient[v1.LogLine], error) {
	return c.getHistoricalLogsClient.CallServerStream(ctx, req)
}

// GatewayClientServiceHandler is an implementation of the devloop_gateway.v1.GatewayClientService
// service.
type GatewayClientServiceHandler interface {
	// List all registered devloop projects.
	ListProjects(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListProjectsResponse], error)
	// Get the configuration for a specific devloop project.
	GetConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error)
	// Get the detailed status of a specific rule within a project.
	GetRuleStatus(context.Context, *connect.Request[v1.GetRuleStatusRequest]) (*connect.Response[v1.GetRuleStatusResponse], error)
	// Manually trigger a specific rule in a devloop project.
	TriggerRuleClient(context.Context, *connect.Request[v1.TriggerRuleClientRequest]) (*connect.Response[v1.TriggerRuleClientResponse], error)
	// List all glob patterns being watched by a specific devloop project.
	ListWatchedPaths(context.Context, *connect.Request[v1.ListWatchedPathsRequest]) (*connect.Response[v1.ListWatchedPathsResponse], error)
	// Read and return the content of a specific file within a devloop project.
	ReadFileContent(context.Context, *connect.Request[v1.ReadFileContentRequest]) (*connect.Response[v1.ReadFileContentResponse], error)
	// Stream real-time logs for a specific rule in a project.
	StreamLogsClient(context.Context, *connect.Request[v1.StreamLogsClientRequest], *connect.ServerStream[v1.LogLine]) error
	// Retrieve historical logs for a specific rule, with optional time filtering.
	GetHistoricalLogsClient(context.Context, *connect.Request[v1.GetHistoricalLogsClientRequest], *connect.ServerStream[v1.LogLine]) error
}

// NewGatewayClientServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGatewayClientServiceHandler(svc GatewayClientServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gatewayClientServiceMethods := v1.File_devloop_v1_devloop_gateway_proto.Services().ByName("GatewayClientService").Methods()
	gatewayClientServiceListProjectsHandler := connect.NewUnaryHandler(
		GatewayClientServiceListProjectsProcedure,
		svc.ListProjects,
		connect.WithSchema(gatewayClientServiceMethods.ByName("ListProjects")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayClientServiceGetConfigHandler := connect.NewUnaryHandler(
		GatewayClientServiceGetConfigProcedure,
		svc.GetConfig,
		connect.WithSchema(gatewayClientServiceMethods.ByName("GetConfig")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayClientServiceGetRuleStatusHandler := connect.NewUnaryHandler(
		GatewayClientServiceGetRuleStatusProcedure,
		svc.GetRuleStatus,
		connect.WithSchema(gatewayClientServiceMethods.ByName("GetRuleStatus")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayClientServiceTriggerRuleClientHandler := connect.NewUnaryHandler(
		GatewayClientServiceTriggerRuleClientProcedure,
		svc.TriggerRuleClient,
		connect.WithSchema(gatewayClientServiceMethods.ByName("TriggerRuleClient")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayClientServiceListWatchedPathsHandler := connect.NewUnaryHandler(
		GatewayClientServiceListWatchedPathsProcedure,
		svc.ListWatchedPaths,
		connect.WithSchema(gatewayClientServiceMethods.ByName("ListWatchedPaths")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayClientServiceReadFileContentHandler := connect.NewUnaryHandler(
		GatewayClientServiceReadFileContentProcedure,
		svc.ReadFileContent,
		connect.WithSchema(gatewayClientServiceMethods.ByName("ReadFileContent")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayClientServiceStreamLogsClientHandler := connect.NewServerStreamHandler(
		GatewayClientServiceStreamLogsClientProcedure,
		svc.StreamLogsClient,
		connect.WithSchema(gatewayClientServiceMethods.ByName("StreamLogsClient")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayClientServiceGetHistoricalLogsClientHandler := connect.NewServerStreamHandler(
		GatewayClientServiceGetHistoricalLogsClientProcedure,
		svc.GetHistoricalLogsClient,
		connect.WithSchema(gatewayClientServiceMethods.ByName("GetHistoricalLogsClient")),
		connect.WithHandlerOptions(opts...),
	)
	return "/devloop_gateway.v1.GatewayClientService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GatewayClientServiceListProjectsProcedure:
			gatewayClientServiceListProjectsHandler.ServeHTTP(w, r)
		case GatewayClientServiceGetConfigProcedure:
			gatewayClientServiceGetConfigHandler.ServeHTTP(w, r)
		case GatewayClientServiceGetRuleStatusProcedure:
			gatewayClientServiceGetRuleStatusHandler.ServeHTTP(w, r)
		case GatewayClientServiceTriggerRuleClientProcedure:
			gatewayClientServiceTriggerRuleClientHandler.ServeHTTP(w, r)
		case GatewayClientServiceListWatchedPathsProcedure:
			gatewayClientServiceListWatchedPathsHandler.ServeHTTP(w, r)
		case GatewayClientServiceReadFileContentProcedure:
			gatewayClientServiceReadFileContentHandler.ServeHTTP(w, r)
		case GatewayClientServiceStreamLogsClientProcedure:
			gatewayClientServiceStreamLogsClientHandler.ServeHTTP(w, r)
		case GatewayClientServiceGetHistoricalLogsClientProcedure:
			gatewayClientServiceGetHistoricalLogsClientHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGatewayClientServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGatewayClientServiceHandler struct{}

func (UnimplementedGatewayClientServiceHandler) ListProjects(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.GatewayClientService.ListProjects is not implemented"))
}

func (UnimplementedGatewayClientServiceHandler) GetConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.GatewayClientService.GetConfig is not implemented"))
}

func (UnimplementedGatewayClientServiceHandler) GetRuleStatus(context.Context, *connect.Request[v1.GetRuleStatusRequest]) (*connect.Response[v1.GetRuleStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.GatewayClientService.GetRuleStatus is not implemented"))
}

func (UnimplementedGatewayClientServiceHandler) TriggerRuleClient(context.Context, *connect.Request[v1.TriggerRuleClientRequest]) (*connect.Response[v1.TriggerRuleClientResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.GatewayClientService.TriggerRuleClient is not implemented"))
}

func (UnimplementedGatewayClientServiceHandler) ListWatchedPaths(context.Context, *connect.Request[v1.ListWatchedPathsRequest]) (*connect.Response[v1.ListWatchedPathsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.GatewayClientService.ListWatchedPaths is not implemented"))
}

func (UnimplementedGatewayClientServiceHandler) ReadFileContent(context.Context, *connect.Request[v1.ReadFileContentRequest]) (*connect.Response[v1.ReadFileContentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.GatewayClientService.ReadFileContent is not implemented"))
}

func (UnimplementedGatewayClientServiceHandler) StreamLogsClient(context.Context, *connect.Request[v1.StreamLogsClientRequest], *connect.ServerStream[v1.LogLine]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.GatewayClientService.StreamLogsClient is not implemented"))
}

func (UnimplementedGatewayClientServiceHandler) GetHistoricalLogsClient(context.Context, *connect.Request[v1.GetHistoricalLogsClientRequest], *connect.ServerStream[v1.LogLine]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.GatewayClientService.GetHistoricalLogsClient is not implemented"))
}
