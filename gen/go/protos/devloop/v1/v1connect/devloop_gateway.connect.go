// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protos/devloop/v1/devloop_gateway.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/panyam/devloop/gen/go/protos/devloop/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DevloopGatewayServiceName is the fully-qualified name of the DevloopGatewayService service.
	DevloopGatewayServiceName = "devloop_gateway.v1.DevloopGatewayService"
	// GatewayClientServiceName is the fully-qualified name of the GatewayClientService service.
	GatewayClientServiceName = "devloop_gateway.v1.GatewayClientService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DevloopGatewayServiceCommunicateProcedure is the fully-qualified name of the
	// DevloopGatewayService's Communicate RPC.
	DevloopGatewayServiceCommunicateProcedure = "/devloop_gateway.v1.DevloopGatewayService/Communicate"
	// GatewayClientServiceListProjectsProcedure is the fully-qualified name of the
	// GatewayClientService's ListProjects RPC.
	GatewayClientServiceListProjectsProcedure = "/devloop_gateway.v1.GatewayClientService/ListProjects"
	// GatewayClientServiceGetConfigProcedure is the fully-qualified name of the GatewayClientService's
	// GetConfig RPC.
	GatewayClientServiceGetConfigProcedure = "/devloop_gateway.v1.GatewayClientService/GetConfig"
	// GatewayClientServiceGetRuleStatusProcedure is the fully-qualified name of the
	// GatewayClientService's GetRuleStatus RPC.
	GatewayClientServiceGetRuleStatusProcedure = "/devloop_gateway.v1.GatewayClientService/GetRuleStatus"
	// GatewayClientServiceTriggerRuleClientProcedure is the fully-qualified name of the
	// GatewayClientService's TriggerRuleClient RPC.
	GatewayClientServiceTriggerRuleClientProcedure = "/devloop_gateway.v1.GatewayClientService/TriggerRuleClient"
	// GatewayClientServiceListWatchedPathsProcedure is the fully-qualified name of the
	// GatewayClientService's ListWatchedPaths RPC.
	GatewayClientServiceListWatchedPathsProcedure = "/devloop_gateway.v1.GatewayClientService/ListWatchedPaths"
	// GatewayClientServiceReadFileContentProcedure is the fully-qualified name of the
	// GatewayClientService's ReadFileContent RPC.
	GatewayClientServiceReadFileContentProcedure = "/devloop_gateway.v1.GatewayClientService/ReadFileContent"
	// GatewayClientServiceStreamLogsClientProcedure is the fully-qualified name of the
	// GatewayClientService's StreamLogsClient RPC.
	GatewayClientServiceStreamLogsClientProcedure = "/devloop_gateway.v1.GatewayClientService/StreamLogsClient"
	// GatewayClientServiceGetHistoricalLogsClientProcedure is the fully-qualified name of the
	// GatewayClientService's GetHistoricalLogsClient RPC.
	GatewayClientServiceGetHistoricalLogsClientProcedure = "/devloop_gateway.v1.GatewayClientService/GetHistoricalLogsClient"
)

// DevloopGatewayServiceClient is a client for the devloop_gateway.v1.DevloopGatewayService service.
type DevloopGatewayServiceClient interface {
	// Communicate handles all bidirectional communication between devloop and the gateway.
	Communicate(context.Context) *connect.BidiStreamForClient[v1.DevloopMessage, v1.DevloopMessage]
}

// NewDevloopGatewayServiceClient constructs a client for the
// devloop_gateway.v1.DevloopGatewayService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDevloopGatewayServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DevloopGatewayServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	devloopGatewayServiceMethods := v1.File_protos_devloop_v1_devloop_gateway_proto.Services().ByName("DevloopGatewayService").Methods()
	return &devloopGatewayServiceClient{
		communicate: connect.NewClient[v1.DevloopMessage, v1.DevloopMessage](
			httpClient,
			baseURL+DevloopGatewayServiceCommunicateProcedure,
			connect.WithSchema(devloopGatewayServiceMethods.ByName("Communicate")),
			connect.WithClientOptions(opts...),
		),
	}
}

// devloopGatewayServiceClient implements DevloopGatewayServiceClient.
type devloopGatewayServiceClient struct {
	communicate *connect.Client[v1.DevloopMessage, v1.DevloopMessage]
}

// Communicate calls devloop_gateway.v1.DevloopGatewayService.Communicate.
func (c *devloopGatewayServiceClient) Communicate(ctx context.Context) *connect.BidiStreamForClient[v1.DevloopMessage, v1.DevloopMessage] {
	return c.communicate.CallBidiStream(ctx)
}

// DevloopGatewayServiceHandler is an implementation of the devloop_gateway.v1.DevloopGatewayService
// service.
type DevloopGatewayServiceHandler interface {
	// Communicate handles all bidirectional communication between devloop and the gateway.
	Communicate(context.Context, *connect.BidiStream[v1.DevloopMessage, v1.DevloopMessage]) error
}

// NewDevloopGatewayServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDevloopGatewayServiceHandler(svc DevloopGatewayServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	devloopGatewayServiceMethods := v1.File_protos_devloop_v1_devloop_gateway_proto.Services().ByName("DevloopGatewayService").Methods()
	devloopGatewayServiceCommunicateHandler := connect.NewBidiStreamHandler(
		DevloopGatewayServiceCommunicateProcedure,
		svc.Communicate,
		connect.WithSchema(devloopGatewayServiceMethods.ByName("Communicate")),
		connect.WithHandlerOptions(opts...),
	)
	return "/devloop_gateway.v1.DevloopGatewayService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DevloopGatewayServiceCommunicateProcedure:
			devloopGatewayServiceCommunicateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDevloopGatewayServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDevloopGatewayServiceHandler struct{}

func (UnimplementedDevloopGatewayServiceHandler) Communicate(context.Context, *connect.BidiStream[v1.DevloopMessage, v1.DevloopMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.DevloopGatewayService.Communicate is not implemented"))
}

// GatewayClientServiceClient is a client for the devloop_gateway.v1.GatewayClientService service.
type GatewayClientServiceClient interface {
	// List all registered devloop projects.
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
	// Get the configuration for a specific devloop project.
	GetConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error)
	// Get the detailed status of a specific rule within a project.
	GetRuleStatus(context.Context, *connect.Request[v1.GetRuleStatusRequest]) (*connect.Response[v1.GetRuleStatusResponse], error)
	// Manually trigger a specific rule in a devloop project.
	TriggerRuleClient(context.Context, *connect.Request[v1.TriggerRuleClientRequest]) (*connect.Response[v1.TriggerRuleClientResponse], error)
	// List all glob patterns being watched by a specific devloop project.
	ListWatchedPaths(context.Context, *connect.Request[v1.ListWatchedPathsRequest]) (*connect.Response[v1.ListWatchedPathsResponse], error)
	// Read and return the content of a specific file within a devloop project.
	ReadFileContent(context.Context, *connect.Request[v1.ReadFileContentRequest]) (*connect.Response[v1.ReadFileContentResponse], error)
	// Stream real-time logs for a specific rule in a project.
	StreamLogsClient(context.Context, *connect.Request[v1.StreamLogsClientRequest]) (*connect.ServerStreamForClient[v1.LogLine], error)
	// Retrieve historical logs for a specific rule, with optional time filtering.
	GetHistoricalLogsClient(context.Context, *connect.Request[v1.GetHistoricalLogsClientRequest]) (*connect.ServerStreamForClient[v1.LogLine], error)
}

// NewGatewayClientServiceClient constructs a client for the devloop_gateway.v1.GatewayClientService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGatewayClientServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GatewayClientServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gatewayClientServiceMethods := v1.File_protos_devloop_v1_devloop_gateway_proto.Services().ByName("GatewayClientService").Methods()
	return &gatewayClientServiceClient{
		listProjects: connect.NewClient[v1.ListProjectsRequest, v1.ListProjectsResponse](
			httpClient,
			baseURL+GatewayClientServiceListProjectsProcedure,
			connect.WithSchema(gatewayClientServiceMethods.ByName("ListProjects")),
			connect.WithClientOptions(opts...),
		),
		getConfig: connect.NewClient[v1.GetConfigRequest, v1.GetConfigResponse](
			httpClient,
			baseURL+GatewayClientServiceGetConfigProcedure,
			connect.WithSchema(gatewayClientServiceMethods.ByName("GetConfig")),
			connect.WithClientOptions(opts...),
		),
		getRuleStatus: connect.NewClient[v1.GetRuleStatusRequest, v1.GetRuleStatusResponse](
			httpClient,
			baseURL+GatewayClientServiceGetRuleStatusProcedure,
			connect.WithSchema(gatewayClientServiceMethods.ByName("GetRuleStatus")),
			connect.WithClientOptions(opts...),
		),
		triggerRuleClient: connect.NewClient[v1.TriggerRuleClientRequest, v1.TriggerRuleClientResponse](
			httpClient,
			baseURL+GatewayClientServiceTriggerRuleClientProcedure,
			connect.WithSchema(gatewayClientServiceMethods.ByName("TriggerRuleClient")),
			connect.WithClientOptions(opts...),
		),
		listWatchedPaths: connect.NewClient[v1.ListWatchedPathsRequest, v1.ListWatchedPathsResponse](
			httpClient,
			baseURL+GatewayClientServiceListWatchedPathsProcedure,
			connect.WithSchema(gatewayClientServiceMethods.ByName("ListWatchedPaths")),
			connect.WithClientOptions(opts...),
		),
		readFileContent: connect.NewClient[v1.ReadFileContentRequest, v1.ReadFileContentResponse](
			httpClient,
			baseURL+GatewayClientServiceReadFileContentProcedure,
			connect.WithSchema(gatewayClientServiceMethods.ByName("ReadFileContent")),
			connect.WithClientOptions(opts...),
		),
		streamLogsClient: connect.NewClient[v1.StreamLogsClientRequest, v1.LogLine](
			httpClient,
			baseURL+GatewayClientServiceStreamLogsClientProcedure,
			connect.WithSchema(gatewayClientServiceMethods.ByName("StreamLogsClient")),
			connect.WithClientOptions(opts...),
		),
		getHistoricalLogsClient: connect.NewClient[v1.GetHistoricalLogsClientRequest, v1.LogLine](
			httpClient,
			baseURL+GatewayClientServiceGetHistoricalLogsClientProcedure,
			connect.WithSchema(gatewayClientServiceMethods.ByName("GetHistoricalLogsClient")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gatewayClientServiceClient implements GatewayClientServiceClient.
type gatewayClientServiceClient struct {
	listProjects            *connect.Client[v1.ListProjectsRequest, v1.ListProjectsResponse]
	getConfig               *connect.Client[v1.GetConfigRequest, v1.GetConfigResponse]
	getRuleStatus           *connect.Client[v1.GetRuleStatusRequest, v1.GetRuleStatusResponse]
	triggerRuleClient       *connect.Client[v1.TriggerRuleClientRequest, v1.TriggerRuleClientResponse]
	listWatchedPaths        *connect.Client[v1.ListWatchedPathsRequest, v1.ListWatchedPathsResponse]
	readFileContent         *connect.Client[v1.ReadFileContentRequest, v1.ReadFileContentResponse]
	streamLogsClient        *connect.Client[v1.StreamLogsClientRequest, v1.LogLine]
	getHistoricalLogsClient *connect.Client[v1.GetHistoricalLogsClientRequest, v1.LogLine]
}

// ListProjects calls devloop_gateway.v1.GatewayClientService.ListProjects.
func (c *gatewayClientServiceClient) ListProjects(ctx context.Context, req *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// GetConfig calls devloop_gateway.v1.GatewayClientService.GetConfig.
func (c *gatewayClientServiceClient) GetConfig(ctx context.Context, req *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error) {
	return c.getConfig.CallUnary(ctx, req)
}

// GetRuleStatus calls devloop_gateway.v1.GatewayClientService.GetRuleStatus.
func (c *gatewayClientServiceClient) GetRuleStatus(ctx context.Context, req *connect.Request[v1.GetRuleStatusRequest]) (*connect.Response[v1.GetRuleStatusResponse], error) {
	return c.getRuleStatus.CallUnary(ctx, req)
}

// TriggerRuleClient calls devloop_gateway.v1.GatewayClientService.TriggerRuleClient.
func (c *gatewayClientServiceClient) TriggerRuleClient(ctx context.Context, req *connect.Request[v1.TriggerRuleClientRequest]) (*connect.Response[v1.TriggerRuleClientResponse], error) {
	return c.triggerRuleClient.CallUnary(ctx, req)
}

// ListWatchedPaths calls devloop_gateway.v1.GatewayClientService.ListWatchedPaths.
func (c *gatewayClientServiceClient) ListWatchedPaths(ctx context.Context, req *connect.Request[v1.ListWatchedPathsRequest]) (*connect.Response[v1.ListWatchedPathsResponse], error) {
	return c.listWatchedPaths.CallUnary(ctx, req)
}

// ReadFileContent calls devloop_gateway.v1.GatewayClientService.ReadFileContent.
func (c *gatewayClientServiceClient) ReadFileContent(ctx context.Context, req *connect.Request[v1.ReadFileContentRequest]) (*connect.Response[v1.ReadFileContentResponse], error) {
	return c.readFileContent.CallUnary(ctx, req)
}

// StreamLogsClient calls devloop_gateway.v1.GatewayClientService.StreamLogsClient.
func (c *gatewayClientServiceClient) StreamLogsClient(ctx context.Context, req *connect.Request[v1.StreamLogsClientRequest]) (*connect.ServerStreamForClient[v1.LogLine], error) {
	return c.streamLogsClient.CallServerStream(ctx, req)
}

// GetHistoricalLogsClient calls devloop_gateway.v1.GatewayClientService.GetHistoricalLogsClient.
func (c *gatewayClientServiceClient) GetHistoricalLogsClient(ctx context.Context, req *connect.Request[v1.GetHistoricalLogsClientRequest]) (*connect.ServerStreamForClient[v1.LogLine], error) {
	return c.getHistoricalLogsClient.CallServerStream(ctx, req)
}

// GatewayClientServiceHandler is an implementation of the devloop_gateway.v1.GatewayClientService
// service.
type GatewayClientServiceHandler interface {
	// List all registered devloop projects.
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
	// Get the configuration for a specific devloop project.
	GetConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error)
	// Get the detailed status of a specific rule within a project.
	GetRuleStatus(context.Context, *connect.Request[v1.GetRuleStatusRequest]) (*connect.Response[v1.GetRuleStatusResponse], error)
	// Manually trigger a specific rule in a devloop project.
	TriggerRuleClient(context.Context, *connect.Request[v1.TriggerRuleClientRequest]) (*connect.Response[v1.TriggerRuleClientResponse], error)
	// List all glob patterns being watched by a specific devloop project.
	ListWatchedPaths(context.Context, *connect.Request[v1.ListWatchedPathsRequest]) (*connect.Response[v1.ListWatchedPathsResponse], error)
	// Read and return the content of a specific file within a devloop project.
	ReadFileContent(context.Context, *connect.Request[v1.ReadFileContentRequest]) (*connect.Response[v1.ReadFileContentResponse], error)
	// Stream real-time logs for a specific rule in a project.
	StreamLogsClient(context.Context, *connect.Request[v1.StreamLogsClientRequest], *connect.ServerStream[v1.LogLine]) error
	// Retrieve historical logs for a specific rule, with optional time filtering.
	GetHistoricalLogsClient(context.Context, *connect.Request[v1.GetHistoricalLogsClientRequest], *connect.ServerStream[v1.LogLine]) error
}

// NewGatewayClientServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGatewayClientServiceHandler(svc GatewayClientServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gatewayClientServiceMethods := v1.File_protos_devloop_v1_devloop_gateway_proto.Services().ByName("GatewayClientService").Methods()
	gatewayClientServiceListProjectsHandler := connect.NewUnaryHandler(
		GatewayClientServiceListProjectsProcedure,
		svc.ListProjects,
		connect.WithSchema(gatewayClientServiceMethods.ByName("ListProjects")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayClientServiceGetConfigHandler := connect.NewUnaryHandler(
		GatewayClientServiceGetConfigProcedure,
		svc.GetConfig,
		connect.WithSchema(gatewayClientServiceMethods.ByName("GetConfig")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayClientServiceGetRuleStatusHandler := connect.NewUnaryHandler(
		GatewayClientServiceGetRuleStatusProcedure,
		svc.GetRuleStatus,
		connect.WithSchema(gatewayClientServiceMethods.ByName("GetRuleStatus")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayClientServiceTriggerRuleClientHandler := connect.NewUnaryHandler(
		GatewayClientServiceTriggerRuleClientProcedure,
		svc.TriggerRuleClient,
		connect.WithSchema(gatewayClientServiceMethods.ByName("TriggerRuleClient")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayClientServiceListWatchedPathsHandler := connect.NewUnaryHandler(
		GatewayClientServiceListWatchedPathsProcedure,
		svc.ListWatchedPaths,
		connect.WithSchema(gatewayClientServiceMethods.ByName("ListWatchedPaths")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayClientServiceReadFileContentHandler := connect.NewUnaryHandler(
		GatewayClientServiceReadFileContentProcedure,
		svc.ReadFileContent,
		connect.WithSchema(gatewayClientServiceMethods.ByName("ReadFileContent")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayClientServiceStreamLogsClientHandler := connect.NewServerStreamHandler(
		GatewayClientServiceStreamLogsClientProcedure,
		svc.StreamLogsClient,
		connect.WithSchema(gatewayClientServiceMethods.ByName("StreamLogsClient")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayClientServiceGetHistoricalLogsClientHandler := connect.NewServerStreamHandler(
		GatewayClientServiceGetHistoricalLogsClientProcedure,
		svc.GetHistoricalLogsClient,
		connect.WithSchema(gatewayClientServiceMethods.ByName("GetHistoricalLogsClient")),
		connect.WithHandlerOptions(opts...),
	)
	return "/devloop_gateway.v1.GatewayClientService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GatewayClientServiceListProjectsProcedure:
			gatewayClientServiceListProjectsHandler.ServeHTTP(w, r)
		case GatewayClientServiceGetConfigProcedure:
			gatewayClientServiceGetConfigHandler.ServeHTTP(w, r)
		case GatewayClientServiceGetRuleStatusProcedure:
			gatewayClientServiceGetRuleStatusHandler.ServeHTTP(w, r)
		case GatewayClientServiceTriggerRuleClientProcedure:
			gatewayClientServiceTriggerRuleClientHandler.ServeHTTP(w, r)
		case GatewayClientServiceListWatchedPathsProcedure:
			gatewayClientServiceListWatchedPathsHandler.ServeHTTP(w, r)
		case GatewayClientServiceReadFileContentProcedure:
			gatewayClientServiceReadFileContentHandler.ServeHTTP(w, r)
		case GatewayClientServiceStreamLogsClientProcedure:
			gatewayClientServiceStreamLogsClientHandler.ServeHTTP(w, r)
		case GatewayClientServiceGetHistoricalLogsClientProcedure:
			gatewayClientServiceGetHistoricalLogsClientHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGatewayClientServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGatewayClientServiceHandler struct{}

func (UnimplementedGatewayClientServiceHandler) ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.GatewayClientService.ListProjects is not implemented"))
}

func (UnimplementedGatewayClientServiceHandler) GetConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.GatewayClientService.GetConfig is not implemented"))
}

func (UnimplementedGatewayClientServiceHandler) GetRuleStatus(context.Context, *connect.Request[v1.GetRuleStatusRequest]) (*connect.Response[v1.GetRuleStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.GatewayClientService.GetRuleStatus is not implemented"))
}

func (UnimplementedGatewayClientServiceHandler) TriggerRuleClient(context.Context, *connect.Request[v1.TriggerRuleClientRequest]) (*connect.Response[v1.TriggerRuleClientResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.GatewayClientService.TriggerRuleClient is not implemented"))
}

func (UnimplementedGatewayClientServiceHandler) ListWatchedPaths(context.Context, *connect.Request[v1.ListWatchedPathsRequest]) (*connect.Response[v1.ListWatchedPathsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.GatewayClientService.ListWatchedPaths is not implemented"))
}

func (UnimplementedGatewayClientServiceHandler) ReadFileContent(context.Context, *connect.Request[v1.ReadFileContentRequest]) (*connect.Response[v1.ReadFileContentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.GatewayClientService.ReadFileContent is not implemented"))
}

func (UnimplementedGatewayClientServiceHandler) StreamLogsClient(context.Context, *connect.Request[v1.StreamLogsClientRequest], *connect.ServerStream[v1.LogLine]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.GatewayClientService.StreamLogsClient is not implemented"))
}

func (UnimplementedGatewayClientServiceHandler) GetHistoricalLogsClient(context.Context, *connect.Request[v1.GetHistoricalLogsClientRequest], *connect.ServerStream[v1.LogLine]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("devloop_gateway.v1.GatewayClientService.GetHistoricalLogsClient is not implemented"))
}
